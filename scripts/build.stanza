defpackage build :
  import core
  import collections
  import arg-parser

;============================================================
;=================== Build Folder Structure =================
;============================================================

;Clean and reset the build folder.
;Creates the following structure:
;  build/
;    outputs/
;    staging/
;      stanzaenv-os-x/

defn reset-build-folder () :
  delete-recursive("build")
  val paths = [
    "build/outputs"
    "build/staging/stanzaenv-os-x"]
  do(create-dir-recursive, paths)

;Reset the output and staging folders.
;Clears these folders:
;  build/outputs/
;  build/staging/
defn reset-output-and-staging-folders () :
  val paths = [
    "build/outputs"
    "build/staging"]
  for path in paths do :    
    delete-recursive(path) when file-exists?(path)
    create-dir-recursive(path)

;============================================================
;===================== Tiny Utilities =======================
;============================================================

;Exits the program if return value is not zero.
defn ret0! (res:Int) :
  if res != 0 :
    exit(res)

;Call the system and exit on failure.
defn call-system! (args:Tuple<String> --
                   working-dir:String|False = false) :
  ret0! $ call-system(args, working-dir, false)

;============================================================
;==================== Create Zip File =======================
;============================================================

;E.g. create-zip("build/staging/stanzaenv-os-x", "stanzaenv-os-x", OS-X)
;
;Populates this folder properly:
;
;  build/staging/stanzaenv-os-x
;
;And zips up that folder to create:
;
;  build/outputs/stanzaenv-os-x.zip
;  build/outputs/stanzaenv-os-x

defn create-zip (exe-path:String, name:String, platform:Platform) :
  ;Get the current working directory.
  val cwd = resolve-path!(".")

  ;Helper: Fill in the name.
  defn fillname (template:String) :
    val exesuffix = ".exe" when platform == Windows else ""
    template $> replace{_, "$NAME", name}
             $> replace{_, "$EXE", exesuffix}
  
  ;Create a reflection of the zip tree in build/staging
  create-dir-recursive(fillname("build/staging/$NAME/bin"))
  copy-file(exe-path, fillname("build/staging/$NAME/bin/stanzaenv$EXE"))  

  ;Zip up the archive.
  val zipfile = to-string(fillname("%_/build/outputs/$NAME.zip") % [cwd])
  call-system!(["zip" "-r" zipfile "."], working-dir = fillname("build/staging/$NAME"))

  ;Copy the exe path to the right place.
  copy-file(exe-path, fillname("build/outputs/$NAME$EXE"))

;============================================================
;================= Build and Zip Stanzaenv ==================
;============================================================

val BUILD-COMMAND = Command(
  name = "build"  
  description = "Builds Stanzaenv."
  
  action = fn (cmd-args) :

    ;Get the current working directory.
    val cwd = resolve-path!(".")

    ;Reset the build folder.
    reset-build-folder()

    ;Dependency upon platform.
    switch(cmd-args["platform"]) :
      "os-x" :
        call-system!(["stanza" "build" "stanzaenv-os-x"])
        create-zip("build/stanzaenv-os-x", "stanzaenv-os-x", OS-X)
      "linux" :
        call-system!(["stanza" "build" "stanzaenv-linux"])
        create-zip("build/stanzaenv-linux", "stanzaenv-linux", Linux)
      "windows" :
        call-system!(["stanza" "build" "stanzaenv-windows"])
        create-zip("/Users/patricksli/Dropbox/Transfer/stanzaenv-windows.exe", "stanzaenv-windows", Windows)
      else :
        throw(Exception("Invalid platform: %~." % [cmd-args["platform"]]))
    
  ;Flags
  Flag("platform", type = OneFlag))

;============================================================
;======================= Launch! ============================
;============================================================

simple-command-line-cli(BUILD-COMMAND)