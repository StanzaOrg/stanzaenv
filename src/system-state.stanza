defpackage stanzaenv/system-state :
  import core
  import collections
  import stz/printing-utils
  import stanzaenv/versions
  import line-wrap
  import stanzaenv/config

;============================================================
;==================== State Representation ==================
;============================================================

;Represents the SystemState of the Stanza environment.
;- project-version: A project-specific Stanza version override.
;- global-version: The global Stanza version.
public defstruct SystemState :
  installation:EnvInstallation
  project-config:ConfigFile|False  
  global-config:ConfigFile|False
  path-status:PathStatus
  installed-versions:Tuple<InstalledStanza>

;Represents the location where stanzaenv is installed.
public deftype EnvInstallation

;Return the path of the installation.
public defmulti path (e:EnvInstallation) -> String

;Represents a hard-coded default location for the installation directory.
;e.g. ~/.stanzaenv
public defstruct DefaultInstallation <: EnvInstallation :
  path: String with: (as-method => true)

;Represents a envvar-controlled location for the installation directory.
;e.g. by STANZAENV_DIR
public defstruct ConfigInstallation <: EnvInstallation :
  path: String with: (as-method => true)

;Represents that stanzaenv is not installed properly.
public defstruct NoInstallation <: EnvInstallation

;Represents the status of the PATH variable.
public defstruct PathStatus :
  path: Tuple<String>
  stanzaenv-index: Int|False

;Indicates that a specific version of Stanza has been downloaded
;and installed.
public defstruct InstalledStanza :
  version: NamedVersion

;============================================================
;===================== Accessors ============================
;============================================================

;Return the path where the system is installed.
public defn install-path (state:SystemState) -> String :
  path(installation(state))

;Return true if the given Stanza version is installed.
public defn installed? (state:SystemState, v:NamedVersion) -> True|False :
  for installed in installed-versions(state) any? :
    version(installed) == v

;Returns the active Stanza version in effect.
public defn active-version (state:SystemState) -> VersionSpecifier|False :
  match(active-config(state)) :
    (c:ConfigFile) : version(c)
    (f:False) : false

;Returns the active Stanza configuration in effect.
public defn active-config (state:SystemState) -> ConfigFile|False :
  label<ConfigFile|False> return :
    match(project-config(state)) :
      (c:ConfigFile) : return(c)
      (f:False) : false
    match(global-config(state)) :
      (c:ConfigFile) : return(c)
      (f:False) : false

;============================================================
;===================== Printers =============================
;============================================================

defmethod print (o:OutputStream, s:InstalledStanza) :
  print(o, "installed %_" % [version(s)])

defmethod print (o:OutputStream, s:PathStatus) :
  if empty?(path(s)) :
    print(o, "No PATH detected")
  else :
    print(o, "PATH:")
    for (p in path(s), i in 0 to false) do :
      lnprint(o, "  %_" % [p])
      if i == stanzaenv-index(s) :
        print(o, " (stanzaenv directory)")
    if stanzaenv-index(s) is False :
      lnprint(o, "No stanzaenv directory found in PATH.")

defmethod print (o:OutputStream, s:NoInstallation) :
  print(o, "Not installed")

defmethod print (o:OutputStream, s:ConfigInstallation) :
  print(o, "Installed to $STANZAENV_DIR (%_)" % [path(s)])

defmethod print (o:OutputStream, s:DefaultInstallation) :
  print(o, "Installed to %_" % [path(s)])

defmethod print (o:OutputStream, s:SystemState) :
  defn one? (x) : [] when x is False else [x]
  val items = [
    simple-field("installation", installation(s))
    named-emptyable-list-fields("project-config", one?(project-config(s)))
    named-emptyable-list-fields("global-config", one?(global-config(s)))
    path-status(s)
    named-list-fields("installed-versions", installed-versions(s))]
  print(o, "StanzaEnv SystemState%_" % [colon-field-list(items)])

;============================================================
;===================== Report ===============================
;============================================================

;Installation Type:
;
;  Type: Default installation to $HOME
;  Location: /usr/patricks/.stanzaenv
;
;Project-Specific Stanza Version:
;
;  No project-specific version set.
;
;Global Stanza Version:
;
;  0.17.54
;
;  Local Directory: /Applications/stanza
;
;Paths in system PATH:
;
;  /usr/patricksli/.stanzaenv (*)
;  /usr/patrickli
;  /Applications/sdf
;
;  (*) This is the Stanzaenv binary directory.
;
;  WARNING: The Stanzaenv binary directory has not been detected on
;  the system PATH.
;
;Installed Stanza Versions:
;
;  0.17.54
;  0.17.53
;  0.16.50
;
;  No Stanza versions installed.

public defn status-report (state:SystemState) :
  within o = printable() :
    print(o, "Installation Type:\n\n")
    print(o, Indented(format(installation(state))))
    print(o, "\n\nProject-Specific Stanza Version:\n\n")
    print(o, Indented(format-project-version(project-config(state))))
    print(o, "\n\nGlobal Stanza Version:\n\n")
    print(o, Indented(format-global-version(global-config(state))))
    print(o, "\n\nInstalled Stanza Versions:\n\n")
    print(o, Indented(format(installed-versions(state))))
    print(o, "\n\nSystem PATH:\n\n")
    print(o, Indented(format(path-status(state))))

defn format (install:EnvInstallation) :
  within o = printable() :
    match(install) :
      (install:DefaultInstallation) :
        print(o, "Type: Default installation to $HOME.")
      (install:ConfigInstallation) :
        print(o, "Type: Custom installation to $STANZAENV_DIR.")
    lnprint(o, "Location: %_" % [path(install)])

defn format-project-version (config:ConfigFile|False) :
  within o = printable() :
    match(config) :
      (config:ConfigFile) :
        print(o, format(version(config)))
        lnprint(o, "Configuration File: %_" % [location(config)])
      (config:False) :
        print(o, "No project-specific Stanza version set.")

defn format-global-version (config:ConfigFile|False) :
  within o = printable() :
    match(config) :
      (config:ConfigFile) :
        print(o, format(version(config)))
      (config:False) :
        print(o, "No glboal Stanza version set.")

defn format (v:VersionSpecifier) :
  match(v) :
    (v:NamedVersion) : v
    (v:LocalVersion) : "Local Directory: %_" % [path(v)]
    (v:SystemVersion) : "System Stanza"

defn format (ps:PathStatus) :
  within o = printable() :
    if empty?(path(ps)) :
      println(o, "PATH is empty.")
      lnprint(o, LineWrapped("WARNING: The Stanzaenv bin directory has not been detected on the system PATH."))
    else :
      for (s in path(ps), i in 0 to false) do :
        if i == stanzaenv-index(ps) : println(o, "%_ (*)" % [s])
        else : println(o, s)
      if stanzaenv-index(ps) is Int :
        lnprint(o, "(*) This is the Stanzaenv bin directory.")
      else :
        lnprint(o, LineWrapped("WARNING: The Stanzaenv bin directory has not been detected on the system PATH."))

defn format (vs:Tuple<InstalledStanza>) :
  if empty?(vs) :
    "No Stanza versions installed."
  else :
    "%n" % [seq(version, vs)]

;Helper: Create a Printable.
defn printable (body:OutputStream -> ?) -> Printable :
  new Printable :
    defmethod print (o:OutputStream, this) :
      body(o)