;Maintains a simple debugging environment to assist in
;end-to-end testing by configuring controls/visibility.
defpackage stanzaenv/debugenv :
  import core
  import collections
  import stanzaenv/errors

;============================================================
;======================== API ===============================
;============================================================

;Add a new variable to the debug environment.
public defn add-var (name:String, default:Maybe, parse:String -> ?) -> False :
  add-var(DebugVar(name, default, parse))

;Retrieve a variable from the debug environment.
public defn get-var (name:String) -> ? :
  get-var-value(name)

;Initialize the debug environment.
public defn initialize-debugenv () -> False :
  ensure-pre-initialization!()
  if debugenv-enabled() :
    parse-debug-vars()
  DEBUG-ENV-INITIALIZED? = true

;============================================================
;=================== Fundamental State ======================
;============================================================

;Represents the specification of a debugging variable.
defstruct DebugVar :
  name:String
  default:Maybe
  parse:String -> ?

;Default parse function does nothing.
defn identify-parse (s:String) : s

;Hold the declarations of each variable.
val VAR-DECLS = HashTable<String,DebugVar>()

;Hold the currently parsed values of each variable.
val VAR-VALUES = HashTable<String,?>()

;Hold true if the debug environment has already been initialized.
var DEBUG-ENV-INITIALIZED?:True|False = false

;============================================================
;==================== Configuration =========================
;============================================================

;Add a new variable declaration.
defn add-var (v:DebugVar) -> False :
  ensure-pre-initialization!()
  if key?(VAR-DECLS, name(v)) :
    fatal("A debug variable with name %~ already exists." % [name(v)])
  VAR-DECLS[name(v)] = v

;Ensure that the debug env has not already been initialized.
defn ensure-preinitialization! () :
  if DEBUG-ENV-INITIALIZED? :
    fatal("Debug environment has already been initialized.")

;Ensure that the debug env has been initialized.
defn ensure-initialization! () :
  if not DEBUG-ENV-INITIALIZED? :
    fatal("Debug environment has not yet been initialized.")

;============================================================
;===================== Retrieval ============================
;============================================================

;Retrieve the value of the variable with the given name.
defn get-var-value (name:String) -> ? :
  ensure-initialization!()
  if key?(VAR-VALUES, name) :
    VAR-VALUES[name]
  else :
    match(get?(VAR-DECLS, name)) :
      (v:DebugVar) :
        value!(default(v))
      (f:False) :
        fatal("Debug environment does not contain a variable with name %~." % [name])

;============================================================
;=================== Initialization =========================
;============================================================

;Return true if the debugging environment is enabled.
defn debugenv-enabled () -> True|False :
  val setting = get-env("ENABLE_DEBUGENV")
  switch(setting) :
    false :
      false
    "" :
      true
    else :
      throw(DebugenvError("Invalid setting of ENABLE_DEBUGENV: %~." % [setting]))

;Parse all the debug variables.
defn parse-debug-vars () -> False :
  val errors = Vector<Exception>()
  for decl in values(VAR-DECLS) do :
    match(get-env(name(decl))) :
      ;Case: The variable was provided.
      (value-str:String) :
        try :
          val value = parse(decl)(value-str)
          VAR-VALUES[name(decl)] = value
        catch (e) :
          add(errors, InvalidDebugVar(name(decl), value-str, e))
      ;Case: The variable was not provided. 
      (f:False) :
        if empty?(default(decl)) :
          add(errors, DebugVarNotProvided(name(decl)))
  if not empty?(errors) :
    throw(DebugVarErrors(to-tuple(errors)))