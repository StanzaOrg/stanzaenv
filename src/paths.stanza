defpackage stanzaenv/paths :
  import core
  import core/parsed-path
  import stanzaenv/system-api
  import stanzaenv/system-utils
  import stanzaenv/versions

;Name of the stanza version configuration file.
public defn project-config-file () -> String :
  ".stanza-version"

;Retrieve the default installation directory.
;1) First try $HOME/.stanzaenv
;2) Then try C:/Program Files/stanzaenv if on Windows.
public defn default-installation-dir (sys:System) -> String|False :
  switch(current-platform(sys)) :
    Windows :
      val appdata = get-env(sys, "LOCALAPPDATA")
      match(appdata:String) :
        match(resolve-path(sys,appdata)) :
          (fullappdata:String) : relative-to(fullappdata, "stanzaenv")
          (f:False) : false
    else :
      val home = get-env(sys, "HOME")
      match(home:String) :
        match(resolve-path(sys,home)) :
          (fullhome:String) : relative-to(fullhome, ".stanzaenv")
          (f:False) : false

;Return the default files in the bin directory.
public defn default-bin-files (sys:System) -> Tuple<String> :
  for item in [StanzaenvExe(), ShimExe("stanza")] map :
    exe-name(item, current-platform(sys))

;Returns the name of the stanza executable found in
;a standard Stanza distribution.
public defn stanza-exe (platform:Platform) -> String :
  val exe-extension = switch(platform) :
    Windows : ".exe"
    else : ""
  to-string("stanza%_" % [exe-extension])

;============================================================
;==================== Directory Structure ===================
;============================================================

;Listing of all items in the Stanzaenv folder.
public deftype StanzaenvDirItem
public deftype StanzaenvExeItem <: StanzaenvDirItem
public defstruct BinFolder <: StanzaenvDirItem
public defstruct ConfigsFolder <: StanzaenvDirItem
public defstruct RootFolder <: StanzaenvDirItem
public defstruct StanzasFolder <: StanzaenvDirItem
public defstruct TempFolder <: StanzaenvDirItem
public defstruct ConfigFolder <: StanzaenvDirItem : (signature:String)
public defstruct StanzaFolder <: StanzaenvDirItem : (version:NamedVersion)
public defstruct StanzaenvExe <: StanzaenvExeItem
public defstruct StanzaExe <: StanzaenvExeItem : (version:NamedVersion)
public defstruct ShimExe <: StanzaenvExeItem : (name:String)
public defstruct StanzaenvConfig <: StanzaenvDirItem
public defstruct DotStanza <: StanzaenvDirItem : (signature:String)

;Return the relative path of this item to the stanzaenv root.
public defn path (item:StanzaenvDirItem, platform:Platform|False) -> String :
  ;Helper: Force retrieve the platform.
  defn platform! () -> Platform :
    match(platform:Platform) : platform
    else : fatal("Platform is necessary to compute path to %_." % [item])
    
  match(item) :
    (item:BinFolder) :
      "bin"
    (item:ConfigsFolder) :
      "configs"
    (item:RootFolder) :
      "."
    (item:StanzasFolder) :
      "stanza"
    (item:TempFolder) :
      "temp"
    (item:ConfigFolder) :
      to-string("configs/%_" % [signature(item)])
    (item:DotStanza) :
      to-string("configs/%_/.stanza" % [signature(item)])    
    (item:StanzaFolder) :
      val [a b c] = value(version(item))
      to-string("stanza/v%_.%_.%_" % [a, b, c])
    (item:StanzaExe) :
      val [a b c] = value(version(item))
      to-string("stanza/v%_.%_.%_/%_" % [a, b, c, stanza-exe(platform!())])      
    (item:ShimExe|StanzaenvExe) :
      to-string("bin/%_" % [exe-name(item, platform!())])
    (item:StanzaenvConfig) :
      "stanzaenv.config"

;Retrieve the filename of the given executable on the platform.
public defn exe-name (item:ShimExe|StanzaenvExe, platform:Platform) -> String :
  val exe-extension = switch(platform) :
    Windows : ".exe"
    else : ""
  match(item) :
    (item:StanzaenvExe) :
      to-string("stanzaenv%_" % [exe-extension])
    (item:ShimExe) :
      to-string("%_%_" % [name(item), exe-extension])

;Return the absolute path of this item.
public defn path (item:StanzaenvDirItem, platform:Platform|False, root:String) -> String :
  relative-to(root, path(item, platform))

;Return the absolute path of this item. Assumes that platform is not necessary.
public defn path (item:StanzaenvDirItem, root:String) -> String :
  relative-to(root, path(item, false))

;============================================================
;====================== Path Utilities ======================
;============================================================

;Return a new path where the relative path is relative to the given directory.
public defn relative-to (dir:String, path:String) -> String :
  to-string(relative-to-dir(parse-path(dir), path))