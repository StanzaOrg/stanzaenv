defpackage stanzaenv/install :
  import core
  import core/parsed-path
  import collections
  import stanzaenv/system-state
  import stanzaenv/system-api
  import stanzaenv/system-utils
  import stanzaenv/errors
  import stanzaenv/paths
  import stanzaenv/urls
  import stanzaenv/install-version
  import stanzaenv/versions

;Main entry point: Install the 'stanzaenv' system.
;Will detect whether already installed.
public defn install-stanzaenv (sys:System) -> False :
  ;Check whether it's already installed.
  match(check-already-installed(sys)) :
    (install:False) :
      fresh-install(sys)
    (install:EnvInstallation) :
      report-already-installed(install)

;Check whether stanzaenv is already installed. Returns false
;if it is not. Throws an exception if the installation is
;corrupted or error occurs during confirmation.
defn check-already-installed (sys:System) -> EnvInstallation|False :
  match(get-env(sys, "STANZAENV_DIR")) :
    ;Supposed to be installed to a specific directory.
    (envdir:String) :
      if file-exists?(sys, envdir) :
        val path = relative-to(envdir, relpath-to-stanzaenv())
        if file-exists?(sys,path) : ConfigInstallation(envdir)
        else : throw(BadConfigInstallation(envdir))
    ;Supposed to be installed to the default directory.
    (f:False) :
      val dir = default-installation-dir(sys)
      match(dir:String) :
        if file-exists?(sys, dir) :
          val path = relative-to(dir, relpath-to-stanzaenv())
          if file-exists?(sys,path) : DefaultInstallation(path)
          else : throw(BadDefaultInstallation(dir))
        
;Print out a message indicating that stanzaenv is already installed.
defn report-already-installed (install:EnvInstallation) -> False :
  match(install) :
    (install:DefaultInstallation) :
      println("Stanzaenv has already been installed to its default location: %~." % [
        path(install)])
    (install:ConfigInstallation) :
      println("Stanzaenv has already been installed to the location pointed to \
               by the STANZAENV_DIR environment variable: %~." % [path(install)])

;Request an installation directory or use default.
defn request-install-dir (sys:System) -> EnvInstallation :
  val msg = "Which directory should stanzaenv be installed in? Leave blank to use the default directory in $HOME: "
  within dir = prompt-user(sys, msg) :
    if dir == "" :
      match(default-installation-dir(sys)) :
        (dir:String) :
          Good(DefaultInstallation(dir))
        (f:False) :
          Bad("Could not determine default installation directory.")
    else :
      match(parent-dir(dir)) :
        (p:String) :
          if file-exists?(sys, p) :
            if directory?(sys, p) : Good(ConfigInstallation(dir))
            else : Bad(to-string("The parent path '%_' is not a directory." % [p]))
          else : Bad(to-string("Installation directory '%_' does not exist." % [p]))
        (f:False) :
          Bad("Improperly formatted installation directory.")

;Returns the parent directory for the given path, or false if it is
;not a valid path.
defn parent-dir (dir:String) -> String|False :
  try : to-string(enclosing-dir(parse-path(dir)))
  catch (e) : false

;Request an initial version for the system to install.
defn request-initial-version (sys:System) -> NamedVersion|False :
  val msg = "What initial version of Stanza should be installed? Leave blank to leave Stanza uninstalled: "  
  within version-str = prompt-user(sys, msg) :
    if version-str == "" :
      Good(false)
    else :
      match(parse-named-version(version-str)) :
        (v:NamedVersion) : Good(v)
        (f:False) : Bad("Invalid version format. Expected a version string like '0.17.3'.")

;Perform a fresh install of the system.
defn fresh-install (sys:System) -> False :
  ;Create a temporary directory beside the appropriate location.
  ;Download the zipfile containing the stanzaenv bundle.
  ;Extract the zipfile to the appropriate location.
  ;Set up the right folders.
  ;Install the initial version of Stanza.
  val install-dir = request-install-dir(sys)
  val parent-dir = parent-dir(path(install-dir)) as String
  within temp-dirs = make-temp-dirs(sys, parent-dir) :    
    val url = stanzaenv-zip-url(current-platform(sys))
    val temp = temp-dir(temp-dirs)
    val stanzaenv-zip = relative-to(temp, "stanzaenv.zip")
    download-to-file(sys, url, stanzaenv-zip)    
    unzip-to-folder(sys, stanzaenv-zip, relative-to(temp, "stanzaenv"))
    move-dir(sys, relative-to(temp, "stanzaenv"), path(install-dir))
    println("Successfully installed stanzaenv to '%_'." % [path(install-dir)])
  install-initial-stanza-version(sys)

;Perform an initial install of the Stanza version.
defn install-initial-stanza-version (sys:System) -> False :
  val version = request-initial-version(sys)
  match(version) :
    (version:NamedVersion) :
      install-stanza-version(sys, version)
    (version:False) :
      println("Leaving Stanza uninstalled.")  

;Return a new path where the relative path is relative to the given directory.
defn relative-to (dir:String, path:String) -> String :
  to-string(relative-to-dir(parse-path(dir), path))