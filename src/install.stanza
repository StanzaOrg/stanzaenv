defpackage stanzaenv/install :
  import core
  import core/parsed-path
  import collections
  import stanzaenv/system-state
  import stanzaenv/read-state
  import stanzaenv/system-api
  import stanzaenv/system-path
  import stanzaenv/system-utils
  import stanzaenv/errors
  import stanzaenv/paths
  import stanzaenv/urls
  import stanzaenv/install-version
  import stanzaenv/versions
  import stanzaenv/set-version
  import stanzaenv/shims
  import stanzaenv/printing
  import stanzaenv/current-version

;Main entry point: Install the 'stanzaenv' system.
;Will detect whether already installed.
public defn install-stanzaenv (sys:System) -> False :
  ;Check whether it's already installed.
  match(detect-installation(sys)) :
    (install:NoInstallation) :
      fresh-install(sys)
    (install:EnvInstallation) :
      report-already-installed(install)

;Perform a fresh install of the system.
defn fresh-install (sys:System) -> False :
  ;Create a temporary directory beside the appropriate location.
  ;Download the zipfile containing the stanzaenv bundle.
  ;Extract the zipfile to the appropriate location.
  ;Set up the right folders.
  ;Install the initial version of Stanza.
  val install-dir = request-install-dir(sys)
  val parent-dir = parent-dir(path(install-dir)) as String
  within temp = make-temp-dir(sys, parent-dir) :
    val url = stanzaenv-zip-url(current-platform(sys), NamedVersion(CURRENT-VERSION))
    val stanzaenv-zip = relative-to(temp, "stanzaenv.zip")
    download-to-file(sys, url, stanzaenv-zip)
    unzip-to-folder(sys, stanzaenv-zip, relative-to(temp, "stanzaenv"))
    move-dir(sys, relative-to(temp, "stanzaenv"), path(install-dir))
    set-executable(sys, path(StanzaenvExe(), current-platform(sys), path(install-dir)))
    create-shim(sys, path(install-dir), "stanza")
    paragraph("Successfully installed stanzaenv to '%_'." % [path(install-dir)])
  initialize-system-path(sys, install-dir)
  initialize-stanzaenv-env-var(sys, install-dir)
  install-initial-stanza-version(sys, install-dir)

;Print out a message indicating that stanzaenv is already installed.
defn report-already-installed (install:EnvInstallation) -> False :
  match(install) :
    (install:DefaultInstallation) :
      paragraph("Stanzaenv has already been installed to its default location: %~." % [
        path(install)])
    (install:ConfigInstallation) :
      paragraph("Stanzaenv has already been installed to the location pointed to \
                 by the STANZAENV_DIR environment variable: %~." % [path(install)])

;Request an installation directory or use default.
defn request-install-dir (sys:System) -> EnvInstallation :
  val msg = "Which directory should stanzaenv be installed in? Leave blank to use the default directory in $HOME."
  within dir = prompt-user(sys, msg, "Install Dir: ") :
    if dir == "" :
      match(default-installation-dir(sys)) :
        (dir:String) :
          paragraph("Using the default directory.")
          Good(DefaultInstallation(dir))
        (f:False) :
          Bad("Could not determine default installation directory.")
    else :
      val split-dir = split-last-name(dir)
      if empty?(split-dir) :
        Bad("Improperly formatted installation directory.")
      else :
        val [parent-dir, stanza-dir] = value!(split-dir)
        match(resolve-path(sys, parent-dir)) :
          (full-parent-dir:String) :
            if directory?(sys,parent-dir) :
              val fullpath = relative-to(full-parent-dir, stanza-dir)
              Good(ConfigInstallation(fullpath))
            else :
              Bad(to-string("The parent path '%_' is not a directory." % [full-parent-dir]))
          (f:False) :
            Bad(to-string("Installation directory '%_' does not exist." % [parent-dir]))

;Split out the last name in the path from its enclosing directory.
defn split-last-name (dir:String) -> Maybe<[String, String]> :
  val parsed = parse-path(dir)
  val last-entry = entries(parsed)[length(entries(parsed)) - 1]
  val parent-dir = enclosing-dir(parsed)
  match(last-entry:NamedPath) :
    One([to-string(parent-dir), name(last-entry)])
  else :
    None()

;Returns the parent directory for the given path, or false if it is
;not a valid path.
defn parent-dir (dir:String) -> String|False :
  try : to-string(enclosing-dir(parse-path(dir)))
  catch (e) : false

;Request an initial version for the system to install.
defn request-initial-version (sys:System) -> NamedVersion|False :
  val msg = "What initial version of Stanza should be installed? Leave blank to leave Stanza uninstalled."
  within version-str = prompt-user(sys, msg, "Version: ") :
    if version-str == "" :
      Good(false)
    else :
      match(parse-named-version(version-str)) :
        (v:NamedVersion) : Good(v)
        (f:False) : Bad("Invalid version format. Expected a version string like '0.17.3'.")

;For a non-default installation, STANZAENV_DIR needs to be set to
;point to the installation directory.
defn initialize-stanzaenv-env-var (sys:System, install:EnvInstallation) -> False :
  match(install:ConfigInstallation) :
    try :
      ;Retrieve the absolute path to installation directory.
      val stanzaenv-path = resolve-path!(sys, path(install))
      try :
        ;Check whether it's set already.
        val already-set? =
          match(get-env(sys, "STANZAENV_DIR")) :
            (dir:String) : resolve-path(sys,dir) == stanzaenv-path
            (f:False) : false
        ;If not set, then set it.
        if not already-set? :
          val msg = "For installing to a non-default location, the STANZAENV_DIR environment \
                     variable needs to be set. Should it be added automatically?"
          if prompt-yes-no(sys, msg) :
            add-to-system-vars(sys, "STANZAENV_DIR", stanzaenv-path)
      catch (e) :
        paragraph("Failed to automatically set the STANZAENV_DIR variable.")
        paragraph("Please manually set STANZAENV_DIR to '%_' to complete \
                   the installation." % [stanzaenv-path])
    catch (e) :
      paragraph("Failed to automatically set the STANZAENV_DIR variable.")
      paragraph("Please manually set STANZAENV_DIR to point to '%_' to complete \
                 the installation." % [path(install)])

;Ask the user whether STANZAENV_DIR should be set automatically.
defn request-set-stanzaenv-dir? (sys:System) -> True|False :
  val msg = "For installing to a non-default location, the STANZAENV_DIR environment \
             variable needs to be set. Should it be added automatically?"
  prompt-yes-no(sys, msg)

;Initialize the system PATH variable to point to the right place.
defn initialize-system-path (sys:System, install:EnvInstallation) -> False :
  ;Retrieve the absolute directory to stanzaenv.
  val bin-dir = path(BinFolder(), path(install))
  try :
    ;Check whether it's on the path already.
    if on-path?(sys, bin-dir) :
      paragraph("The 'stanzaenv' binary directory is already on the system PATH.")
    else :
      val msg = "The 'stanzaenv' binary directory is not detected on the system PATH. \
                 Should it be added automatically?"
      if prompt-yes-no(sys, msg) :
        add-to-path(sys, bin-dir)
  catch (e) :
    paragraph("Failed to automatically set the system PATH: %_" % [e])
    paragraph("Please manually add '%_' to the PATH or else 'stanzaenv' \
               will not be callable from the terminal." % [bin-dir])

;Ask the user a yes/no question.
defn prompt-yes-no (sys:System, msg:String) -> True|False :
  within decision = prompt-user(sys, msg, "Yes/No: ") :
    switch(lower-case(decision)) :
      "yes" : Good(true)
      "no" : Good(false)
      else : Bad("Not a valid option.")

;Perform an initial install of the Stanza version.
defn install-initial-stanza-version (sys:System, install:EnvInstallation) -> False :
  val version = request-initial-version(sys)
  match(version) :
    (version:NamedVersion) :
      install-stanza-version(sys, version, path(install))
      set-global-stanza-version(sys, version, system-state(sys,install))
    (version:False) :
      paragraph("Leaving Stanza uninstalled.")