defpackage stanzaenv/gen-dotstanza :
  import core
  import collections
  import core/parsed-path
  import stanzaenv/versions
  import stanzaenv/system-api
  import stanzaenv/system-utils
  import stanzaenv/paths
  import stanzaenv/config
  import stanzaenv/errors
  import stz/printing-utils

;Ensure that a .stanza file for the given configuration
;has been generated.
public defn generate-dotstanza-config (sys:System,
                                       root:String,
                                       stanza-dir:String,
                                       config:ConfigFile) -> String :
  ;Get the directory where it should be.
  val config-dir = path(ConfigFolder(signature(config)), root)
  
  ;If it doesn't already exist, then generate it.
  if not file-exists?(sys, config-dir) :
    within temp = make-temp-dir(sys, path(TempFolder(), root)) :
      run-install-command(sys, stanza-dir, temp)
      attach-data(sys, temp, config)
      move-dir(sys, temp, config-dir)
      
  ;Return the folder where it is generated.
  config-dir

;Run the "stanza install" command.
defn run-install-command (sys:System,
                          stanza-dir:String,
                          config-dir:String) -> False :
  val stanza-exe = string-join(["./" stanza-exe(current-platform(sys))])
  val platform-str = switch(current-platform(sys)) :
    OS-X : "os-x"
    Linux : "linux"
    Windows : "windows"
  val [ret, output] = call-system(
                        sys
                        stanza-exe
                        [stanza-exe "install" "-platform" platform-str "-path" config-dir]
                        stanza-dir
                        false)
  if ret != 0 :
    throw(InstallationCommandFailed(output))

;Attach the other data in the config: proj-files, pkg-dirs.
defn attach-data (sys:System, config-dir:String, config:ConfigFile) :
  ;Accumulate statements to add to the config file.
  val statements = Vector<?>()

  ;Configure the pkg-dirs.
  val pkg-dirs = pkg-dirs(config)
  if not empty?(pkg-dirs) :
    val s = "pkg-dirs = (%_)" % [indented-field-list(seq(written,pkg-dirs))]
    add(statements, s)

  ;Configure the proj-files.
  val proj-files = proj-files(config)
  if not empty?(proj-files) :
    val s = "proj-files = (%_)" % [indented-field-list(seq(written,proj-files))]
    add(statements, s)

  ;Add the data to the config file, if there is any.
  if not empty?(statements) :
    val snippet = "\n%n" % [statements]
    val filename = relative-to(config-dir, ".stanza")
    spit(sys, filename, snippet, true)