defpackage stanzaenv/read-state :
  import core
  import collections
  import core/parsed-path
  import stanzaenv/config
  import stanzaenv/config-syntax
  import stanzaenv/system-state
  import stanzaenv/system-api
  import stanzaenv/system-utils
  import stanzaenv/system-path
  import stanzaenv/versions
  import stanzaenv/paths
  import stanzaenv/errors

public defn system-state (sys:System) -> SystemState :
  within wrap-error(SystemStateError) :
    ;Read the installation type.
    val installation = detect-installation(sys)
    if installation is NoInstallation :
      throw(StanzaenvNotInstalled())
    ;Read the project-specific version.
    val project-version = read-project-stanza-version(sys)
    ;Read the global version.
    val global-version = read-global-stanza-version(sys, path(installation))
    ;Read the path status
    val path-status = read-path-status(sys, path(installation))
    
    println("Installation: %_" % [installation])
    println("Project version: %_" % [project-version])
    println("Global version: %_" % [global-version])
    println("Path status: %_" % [path-status])
    fatal("Not yet implemented")

;============================================================
;============ Read the Project Stanza Version ===============
;============================================================

;Read the project stanza version.
defn read-project-stanza-version (sys:System) -> ProjectVersion|False :
  value? $ for path in all-parent-directories(sys, ".") first :
    val filepath = to-string(relative-to-dir(path, project-config-file()))
    if file-exists?(sys, filepath) :
      val file = read-config-file(sys,filepath)
      One(ProjectVersion(filepath, version(file)))
    else :
      None()

;Retrieve all parent directories starting from 'start'.
defn all-parent-directories (sys:System, start:String) -> Seq<ParsedPath> :
  val parsed = parse-path(resolve-path!(sys, start))
  for n in reverse(1 through length(entries(parsed))) seq :
    ParsedPath(entries(parsed)[0 to n])

;============================================================
;============= Read the Global Stanza Version ===============
;============================================================

defn read-global-stanza-version (sys:System, root:String) -> VersionSpecifier|False :
  if file-exists?(sys, global-config-file(root)) :
    val file = read-config-file(sys, global-config-file(root))
    version(file)  

;============================================================
;=================== Detect Installation ====================
;============================================================

;Check whether stanzaenv is already installed. Returns false
;if it is not. Throws an exception if the installation is
;corrupted or error occurs during confirmation.
public defn detect-installation (sys:System) -> EnvInstallation :
  match(get-env(sys, "STANZAENV_DIR")) :
    ;Supposed to be installed to a specific directory.
    (envdir:String) :
      if file-exists?(sys, envdir) :
        if not valid-installation?(sys, envdir) :
          throw(BadConfigInstallation(envdir))
        ConfigInstallation(envdir)
      else : NoInstallation()
    ;Supposed to be installed to the default directory.
    (f:False) :
      val dir = default-installation-dir(sys)
      match(dir:String) :
        if file-exists?(sys, dir) :
          if not valid-installation?(sys, dir) :
            throw(BadDefaultInstallation(dir))
          DefaultInstallation(dir)
        else : NoInstallation()
      else : NoInstallation()

;Returns true if the given root is a valid installation.
defn valid-installation? (sys:System, root:String) -> True|False :
  val path = relative-to(root, relpath-to-stanzaenv())
  directory?(sys, root) and
  file-exists?(sys, path) and
  not directory?(sys, path)

;============================================================
;================= Read the Path Status =====================
;============================================================

defn read-path-status (sys:System, root:String) -> PathStatus :
  val syspaths = system-paths(sys)
  val index = find-on-path-list(sys, syspaths, bin-dir(root))
  PathStatus(syspaths, index)

;============================================================
;================ Detect Installed Versions =================
;============================================================