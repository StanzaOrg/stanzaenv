defpackage stanzaenv/system-utils :
  import core
  import collections
  import core/parsed-path
  import stanzaenv/system-api
  import stanzaenv/printing
  import stanzaenv/errors

;============================================================
;==================== Path Resolution =======================
;============================================================

public defn resolve-path! (s:System, path:String) -> String :
  val resolved = resolve-path(s, path)
  match(resolved:String) : resolved
  else : throw(PathResolutionError(path))

;============================================================
;=================== Path Extensions ========================
;============================================================

;Strip away the .exe suffix if it has one.
public defn strip-exe? (s:String) -> String :
  if suffix?(s, ".exe") :
    val n1 = length(s)
    val n2 = length(".exe")
    s[0 to n1 - n2]
  else :
    s

;Retrieve the executable name given the path.
;If strip-extension? is true, then remove the .exe at the end.
public defn exe-name (path:String, strip-extension?:True|False) -> String :
  val parsed = parse-path(path)
  val n = length(entries(parsed))
  val e = entries(parsed)[n - 1]
  match(e:NamedPath) :
    if strip-extension? : strip-exe?(name(e))
    else : name(e)
  else :
    throw(ExtractExeNameError(path))    

;============================================================
;===================== Temp Directories =====================
;============================================================

;Represents a collection of temporary directories.
public deftype TempDirs

;Request another temporary directory.
public defmulti temp-dir (dirs:TempDirs) -> String

;Execute a body with the ability to create temporary directories in the given
;directory.
public defn make-temp-dirs<?T> (body:TempDirs -> ?T, sys:System, dir:String) -> T :
  ;Store all created directories.
  val created-dirs = Vector<String>()

  ;Count upwards to create unique temporary names.
  val counter = to-seq(0 to false)

  ;Create a new temporary directory.
  defn make-temp-dir () -> String :
    val name = string-join([dir "/temp" next(counter)])
    if file-exists?(sys, name) :
      make-temp-dir()
    else :
      create-dir(sys, name)
      add(created-dirs, name)
      name

  ;Delete all temporary directories.
  defn delete-all-temp-dirs () -> False :
    for dir in created-dirs do :
      if file-exists?(sys, dir) :
        delete-recursive(sys, dir)

  ;Launch!
  try :
    val temp-dirs = new TempDirs :
      defmethod temp-dir (this) : make-temp-dir()
    body(temp-dirs)
  finally :
    delete-all-temp-dirs()

;Convenience: Create only a single temporary directory.
public defn make-temp-dir<?T> (body:String -> ?T, sys:System, dir:String) -> T :
  within dirs = make-temp-dirs(sys, dir) :
    body(temp-dir(dirs))
  
;============================================================
;===================== Prompter =============================
;============================================================

;Represents a verified prompt result.
public deftype PromptResult<T>

;Represents a good prompt result.
public defstruct Good<T> <: PromptResult<T> :
  value:T

;Convenience constructor.
public defn Good<?T> (value:?T) : Good<T>(value)
  
;Represents a bad prompt result.
public defstruct Bad <: PromptResult<Void> :
  message:String

;Prompt a user repeatedly and verify the output.
public defn prompt-user<?T> (verify:String -> PromptResult<?T>, sys:System, prompt:String, short:String) -> T :
  let loop () :
    val str = trim(prompt-user(sys, prompt, short))
    match(verify(str)) :
      (result:Good<T>) :
        value(result)
      (result:Bad) :
        paragraph(message(result))
        loop()