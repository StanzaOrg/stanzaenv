defpackage stanzaenv/system-utils :
  import core
  import collections
  import stanzaenv/system-api

;============================================================
;===================== Temp Directories =====================
;============================================================

;Represents a collection of temporary directories.
public deftype TempDirs

;Request another temporary directory.
public defmulti temp-dir (dirs:TempDirs) -> String

;Execute a body with the ability to create temporary directories in the given
;directory.
public defn make-temp-dirs<?T> (body:TempDirs -> ?T, sys:System, dir:String) -> T :
  ;Store all created directories.
  val created-dirs = Vector<String>()

  ;Count upwards to create unique temporary names.
  val counter = to-seq(0 to false)

  ;Create a new temporary directory.
  defn make-temp-dir () -> String :
    val name = string-join([dir "/temp" next(counter)])
    if file-exists?(sys, name) :
      make-temp-dir()
    else :
      create-dir(sys, name)
      add(created-dirs, name)
      name

  ;Delete all temporary directories.
  defn delete-all-temp-dirs () -> False :
    for dir in created-dirs do :
      delete-recursive(sys, dir)

  ;Launch!
  try :
    val temp-dirs = new TempDirs :
      defmethod temp-dir (this) : make-temp-dir()
    body(temp-dirs)
  finally :
    delete-all-temp-dirs()
  
;============================================================
;===================== Prompter =============================
;============================================================

;Represents a verified prompt result.
public deftype PromptResult<T>

;Represents a good prompt result.
public defstruct Good<T> <: PromptResult<T> :
  value:T

;Convenience constructor.
public defn Good<?T> (value:?T) : Good<T>(value)
  
;Represents a bad prompt result.
public defstruct Bad <: PromptResult<Void> :
  message:String

;Prompt a user repeatedly and verify the output.
public defn prompt-user<?T> (verify:String -> PromptResult<?T>, sys:System, prompt:String) -> T :
  let loop () :
    val str = trim(prompt-user(sys, prompt))
    match(verify(str)) :
      (result:Good<T>) :
        value(result)
      (result:Bad) :
        println(message(result))
        loop()