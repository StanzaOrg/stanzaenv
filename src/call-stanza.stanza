defpackage stanzaenv/call-stanza :
  import core
  import collections
  import stanzaenv/system-api
  import stanzaenv/system-state
  import stanzaenv/versions
  import stanzaenv/paths
  import stanzaenv/system-path
  import stanzaenv/errors
  import stanzaenv/gen-dotstanza
  import stanzaenv/config
  
public defn call-stanza (sys:System,
                         extension-name:String|False,
                         args:Tuple<String>,
                         system-state:SystemState) -> False :
  ;Ensure that a version is properly installed.
  val version = ensure-active-version-installed(system-state)

  ;Retrieve the extension executable if one is asked for.
  val extension = match(extension-name:String) :
    retrieve-extension-path(extension-name, system-state)

  ;If it's the system version.
  if version is SystemVersion :
    launch-system-stanza(sys, extension, args, system-state)
  else :
    ;Retrieve the path to the Stanza directory.
    val stanza-dir = stanza-path(system-state, version)
    ;Retrieve the path to the Stanza executable to call.
    val stanza-exe = match(extension:String) : extension
                     else : relative-to(stanza-dir, stanza-exe(current-platform(sys)))
    ;Ensure that the executable is there.
    if not file-exists?(sys,stanza-exe) :
      throw(MissingStanzaExe(stanza-exe))
    ;Ensure that the DotStanza configuration file exists.
    val config-dir = generate-dotstanza-config(
                       sys,
                       install-path(system-state),
                       stanza-dir,
                       active-config(system-state) as ConfigFile)
    ;Launch Stanza with the appropriate STANZA_CONFIG.
    launch-stanza-exe(sys, stanza-exe, config-dir, args)

;Retrieve the extension executable.
defn retrieve-extension-path (name:String, state:SystemState) -> String :
  val path = extension-path(active-config(state) as ConfigFile, name)
  match(path:String) : path
  else : throw(NoExtension(name))
  
;Ensure that the active Stanza version is installed.
defn ensure-active-version-installed (state:SystemState) -> VersionSpecifier :
  match(active-version(state)) :
    (v:NamedVersion) :
      if not installed?(state, v) :
        throw(ActiveVersionNotInstalled(v))
      v
    (v:VersionSpecifier) :
      v
    (f:False) : 
      throw(NoActiveVersionSpecified())

;Retrieve the Stanza directory for the corresponding version.
defn stanza-path (state:SystemState, v:VersionSpecifier) -> String :
  match(v) :
    (v:NamedVersion) : path(StanzaFolder(v), install-path(state))
    (v:LocalVersion) : path(v)

;Launch the System Stanza version.
;It does this by removing the 'stanzaenv' folder from the PATH variable.
defn launch-system-stanza (sys:System,
                           extension:String|False,
                           args:Tuple<String>,
                           state:SystemState) -> False :
  ;Gather the PATH elements that do not correspond to stanzaenv folder.
  val new-path = to-tuple $
    for (item in path(path-status(state)), i in 0 to false) filter :
      i != stanzaenv-index(path-status(state))
  ;Set the new path, and then call stanza.
  set-system-paths(sys, new-path)
  val exe = match(extension:String) : extension
            else : args[0]
  replace-current-process(sys, exe, args)

;Launch the Stanza executable.
defn launch-stanza-exe (sys:System,
                        stanza-exe:String,
                        config-dir:String,
                        args:Tuple<String>) -> False :
  val new-args = to-tuple $
    for (x in args, i in 0 to false) seq :
      if i == 0 : stanza-exe
      else : x
  set-env(sys, "STANZA_CONFIG", config-dir)
  replace-current-process(sys, stanza-exe, new-args)