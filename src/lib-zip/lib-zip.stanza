defpackage zip :
  import core
  import collections
  import core/parsed-path

;============================================================
;==================== Errors ================================
;============================================================

public deftype ZipError <: Exception

public defstruct ZipOpenError <: ZipError:
  path:String

defmethod print (o:OutputStream, e:ZipOpenError): 
  print(o, "Could not open zip archive %~." % [path(e)])

public defstruct ZipSlurpError <: ZipError : 
  path:String 

defmethod print (o:OutputStream, e:ZipSlurpError): 
  print(o, "Could not find %~ for reading." % [path(e)])

public defstruct ZipFileError <: ZipError : 
  path:String 

defmethod print (o:OutputStream, e:ZipFileError): 
  print(o, "Could not open file %~ within zip archive for reading." % [path(e)])

public defstruct ZipFileIndexError <: ZipError : 
  index:Int

defmethod print (o:OutputStream, e:ZipFileIndexError): 
  print(o, "Could not open file at index %_ within zip archive for reading." % [index(e)])

public defstruct ZipReadError <: ZipError

defmethod print (o:OutputStream, e:ZipReadError): 
  print(o, "Error when reading file from zip archive.")

public defstruct ZipCloseError <: ZipError

defmethod print (o:OutputStream, e:ZipCloseError): 
  print(o, "Error occurred when closing zip archive.")

public defstruct ZipFileCloseError <: ZipError

defmethod print (o:OutputStream, e:ZipFileCloseError): 
  print(o, "Error occurred when closing zip file.")

public defstruct ZipStatsError <: ZipError

defmethod print (o:OutputStream, e:ZipStatsError): 
  print(o, "Error occurred when retrieving status of zip file.")

public defstruct ZipTreeError <: ZipError

defmethod print (o:OutputStream, e:ZipTreeError): 
  print(o, "Error occurred when analyzing tree structure of zip archive.")

public defstruct ZipExtractError <: ZipError :
  message: String

defmethod print (o:OutputStream, e:ZipExtractError): 
  print(o, "Failed to extract zip file. %_" % [message(e)])

;============================================================
;==================== C Prototypes ==========================
;============================================================

;zip_t* zip_open(const char *path, int flags, int *errorp);
extern zip_open:  (ptr<byte>, int, ptr<int>) -> ptr<?>

;zip_file_t* zip_fopen(zip_t* archive, const char *fname, zip_flags_t flags);
extern zip_fopen: (ptr<?>, ptr<byte>, long) -> ptr<?>

;zip_file_t* zip_fopen_index(zip_t* archive, long index, zip_flags_t flags);
extern zip_fopen_index: (ptr<?>, long, long) -> ptr<?>

;long zip_fread(zip_file_t* file, void *buf, long nbytes);
extern zip_fread: (ptr<?>, ptr<?>, long) -> long

;int zip_fclose(zip_file_t* file);
extern zip_fclose: (ptr<?>) -> int

;int zip_close(zip_t* archive);
extern zip_close: (ptr<?>) -> int

;void zip_discard(zip_t* archive);
extern zip_discard: (ptr<?>) -> int

;long zip_get_num_entries(zip_t* archive, zip_flags_t flags);
extern zip_get_num_entries: (ptr<?>, int) -> long

;int zip_stat_index(zip_t* archive, long index, int flags, zip_stat* out);
extern zip_stat_index: (ptr<?>, long, int, ptr<?>) -> int

;============================================================
;==================== #Define Flags =========================
;============================================================

lostanza val ZIP_CREATE:int = 1
lostanza val ZIP_EXCL:int = 2
lostanza val ZIP_CHECKCONS:int = 4
lostanza val ZIP_TRUNCATE:int = 8
lostanza val ZIP_RDONLY:int = 16

lostanza val ZIP_FL_NOCASE:int = 1       ;ignore case on name lookup 
lostanza val ZIP_FL_NODIR:int = 2        ;ignore directory component 
lostanza val ZIP_FL_COMPRESSED:int = 4   ;read compressed data 
lostanza val ZIP_FL_UNCHANGED:int = 8    ;use original data, ignoring changes 
lostanza val ZIP_FL_RECOMPRESS:int = 16  ;force recompression of data 
lostanza val ZIP_FL_ENCRYPTED:int = 32   ;read encrypted data (implies ZIP_FL_COMPRESSED) 
lostanza val ZIP_FL_ENC_GUESS:int = 0    ;guess string encoding (is default) 
lostanza val ZIP_FL_ENC_RAW:int = 64     ;get unmodified string 
lostanza val ZIP_FL_ENC_STRICT:int = 128 ;follow specification strictly 
lostanza val ZIP_FL_LOCAL:int = 256      ;in local header 
lostanza val ZIP_FL_CENTRAL:int = 512    ;in central directory 
lostanza val ZIP_FL_ENC_UTF_8:int = 2048 ;string is UTF-8 encoded 
lostanza val ZIP_FL_ENC_CP437:int = 4096 ;string is CP437 encoded 
lostanza val ZIP_FL_OVERWRITE:int = 8192 ;zip_file_add: if file with name exists, overwrite (replace) it 

lostanza val ZIP_STAT_NAME:long = 0x0001L
lostanza val ZIP_STAT_INDEX:long = 0x0002L
lostanza val ZIP_STAT_SIZE:long = 0x0004L
lostanza val ZIP_STAT_COMP_SIZE:long = 0x0008L
lostanza val ZIP_STAT_MTIME:long = 0x0010L
lostanza val ZIP_STAT_CRC:long = 0x0020L
lostanza val ZIP_STAT_COMP_METHOD:long = 0x0040L
lostanza val ZIP_STAT_ENCRYPTION_METHOD:long = 0x0080L
lostanza val ZIP_STAT_FLAGS:long = 0x0100L

;============================================================
;======================= Datatypes ==========================
;============================================================

public lostanza deftype ZipArchive <: Unique :
  zip:ptr<?>
  memtracker:ref<MemoryTracker>

public lostanza deftype ZipFile <: Unique :
  file:ptr<?>
  memtracker:ref<MemoryTracker>

;============================================================
;=================== Open a ZipArchive ======================
;============================================================

lostanza var ZIP-OPEN-EC:int = 0
public lostanza defn ZipArchive (path:ref<String>) -> ref<ZipArchive>:
  ;Call zip_open, and retrieve pointer to struct.
  ZIP-OPEN-EC = 0
  val ptr = call-c zip_open(addr!(path.chars), ZIP_RDONLY, addr!(ZIP-OPEN-EC))
  ;zip_open returns null if it fails.
  if ptr == null :
    throw(ZipOpenError(path))
  ;Otherwise, return the completed archive.
  val archive = new ZipArchive{ptr, MemoryTracker(String("ZipArchive"), false)}
  add-finalizer(MemoryLeakFinalizer(archive.memtracker), archive)
  return archive

;============================================================
;===== Open a File For Reading Within a ZipArchive ==========
;============================================================

public lostanza defn ZipFile (archive:ref<ZipArchive>, path:ref<String>) -> ref<ZipFile> :
  val ptr = call-c zip_fopen(archive.zip, addr!(path.chars), ZIP_FL_ENC_RAW)
  if ptr == null : throw(ZipFileError(path))
  val file = new ZipFile{ptr, MemoryTracker(String("ZipFile"), false)}
  add-finalizer(MemoryLeakFinalizer(file.memtracker), file)
  return file

public lostanza defn ZipFile (archive:ref<ZipArchive>, index:ref<Int>) -> ref<ZipFile> :
  val ptr = call-c zip_fopen_index(archive.zip, index.value, ZIP_FL_ENC_RAW)
  if ptr == null : throw(ZipFileIndexError(index))
  val file = new ZipFile{ptr, MemoryTracker(String("ZipFile"), false)}
  add-finalizer(MemoryLeakFinalizer(file.memtracker), file)
  return file  

;============================================================
;========= Read Bytes from a File Within a ZipArchive =======
;============================================================

public lostanza defn read-bytes (f:ref<ZipFile>, buf:ref<ByteArray>) -> ref<Int> :
  val buf-size = length(buf)
  val bytes-read = call-c zip_fread(f.file, addr!(buf.data), buf-size.value)
  if bytes-read < 0 : throw(ZipReadError())
  return new Int{bytes-read as int}

;============================================================
;================ Close an Opened ZipFile ===================
;============================================================

public lostanza defn close (file:ref<ZipFile>) -> ref<False> :
  if freed(file.memtracker) == true :
    fatal("ZipFile has already been freed.")
  val result = call-c zip_fclose(file.file)
  if result == 0 :
    set-freed(file.memtracker, true)
    return false
  else : return throw(ZipFileCloseError())

;============================================================
;=============== Close an Opened ZipArchive =================
;============================================================

public lostanza defn close (archive:ref<ZipArchive>) -> ref<False> :
  if freed(archive.memtracker) == true :
    fatal("ZipArchive has already been freed.")
  val result = call-c zip_close(archive.zip)
  if result == 0 :
    set-freed(archive.memtracker, true)
    return false
  else :
    return throw(ZipCloseError())

;============================================================
;============== Discard an Opened ZipArchive ================
;============================================================

public lostanza defn discard (archive:ref<ZipArchive>) -> ref<False> :
  if freed(archive.memtracker) == true :
    fatal("ZipArchive has already been freed.")
  call-c zip_discard(archive.zip)
  set-freed(archive.memtracker, true)
  return false

;============================================================
;========== Return Number of Entries in Zip Archive  ========
;============================================================

public lostanza defn num-entries (archive:ref<ZipArchive>) -> ref<Int> :
  val result = call-c zip_get_num_entries(archive.zip, 0)
  return new Int{result as int}

;============================================================
;=========== Get Information about Zip File =================
;============================================================

;Structure holding zip statistics
public lostanza deftype ZipStat :
  var valid:long
  var name:ptr<?>
  var index:long
  var size:long
  var comp-size:long
  var mtime:long
  var crc:int
  var comp-enc-method:int
  var flags:int

public lostanza defn stats (archive:ref<ZipArchive>, index:ref<Int>) -> ref<ZipStat> :
  val stats = new ZipStat{0L, null, 0L, 0L, 0L, 0L, 0, 0, 0}
  val result = call-c zip_stat_index(archive.zip, index.value, ZIP_FL_ENC_RAW, addr!([stats]))
  if result == 0 : return stats
  else : return throw(ZipStatsError())
  
public lostanza defn name? (stat:ref<ZipStat>) -> ref<String|False> :
  if stat.valid & ZIP_STAT_NAME : return String(stat.name)
  else : return false

public lostanza defn index? (stat:ref<ZipStat>) -> ref<Int|False> :
  if stat.valid & ZIP_STAT_INDEX : return new Int{stat.index as int}
  else : return false

public lostanza defn size? (stat:ref<ZipStat>) -> ref<Long|False> :
  if stat.valid & ZIP_STAT_SIZE : return new Long{stat.size}
  else : return false

public lostanza defn compressed-size? (stat:ref<ZipStat>) -> ref<Long|False> :
  if stat.valid & ZIP_STAT_COMP_SIZE : return new Long{stat.comp-size}
  else : return false

public defn directory? (stats:ZipStat) -> True|False :
  match(name?(stats)) :
    (name:String) : suffix?(name, "/") and size?(stats) == 0L
    (name:False) : false

defmethod print (o:OutputStream, stats:ZipStat) :
  print(o, "ZipStat(name = %~, index = %_, size = %_, comp-size = %_)" % [
    name?(stats), index?(stats), size?(stats), compressed-size?(stats)])

;============================================================
;================== Memory Leak Tracking ====================
;============================================================

defstruct MemoryTracker :
  type:String
  freed:True|False with: (setter => set-freed)

defn MemoryLeakFinalizer (tracker:MemoryTracker) -> Finalizer :
  new Finalizer :
    defmethod run (this) :
      if not freed(tracker) :
        fatal("Memory leak detected. %_ object has not been properly freed." % [type(tracker)])

;============================================================
;================= High-Level Slurp Function ================
;============================================================

public defn slurp (archive:ZipArchive, path:String) -> String :
  val buffer = StringBuffer()
  val bytes = ByteArray(1024 * 1024)
  val file = ZipFile(archive, path)
  try :
    let loop () :
      val bytes-read = read-bytes(file, bytes)
      print(buffer, make-string-from-array(bytes-read, bytes))
      loop() when bytes-read > 0
    to-string(buffer)
  finally :
    close(file)

;============================================================
;============== High-Level Write Bytes Function =============
;============================================================

public defn write-bytes (zipfile:ZipFile, file:RandomAccessFile) -> False :
  val bytes = ByteArray(1024 * 1024)
  let loop () :
    val bytes-read = read-bytes(zipfile, bytes)
    put(file, bytes, 0 to bytes-read)
    loop() when bytes-read > 0

;============================================================
;============ Tree Analysis Of Zip Directory ================
;============================================================

defstruct ZipTree :
  item: ZipStat|False with: (setter => set-item)
  entries:HashTable<String,ZipTree> with: (init => HashTable<String,ZipTree>())

;Analyze the sequence of stats, and form the tree.
;Throws a ZipTreeError if the stats files do not correspond to a tree.
public defn ZipTree (stats:Seqable<ZipStat>) -> ZipTree :
  ;Add the given stat to the tree
  defn add-to-tree (tree:ZipTree, stat:ZipStat) :
    match(name?(stat)) :
      (name:String) :
        try : add-to-tree(tree, parse-path(name), 0, stat)
        catch (e:UpPastRoot) : throw(ZipTreeError())
      (f:False) : throw(ZipTreeError())
      
  ;Helper function, add the i'th element in the path to the tree.
  defn add-to-tree (tree:ZipTree, path:ParsedPath, i:Int, stat:ZipStat) :
    if i < length(entries(path)) :
      match(entries(path)[i]) :
        (e:NamedPath) :
          if key?(entries(tree), name(e)) :
            val sub-tree = entries(tree)[name(e)]
            add-to-tree(sub-tree, path, i + 1, stat)
          else :
            val new-tree = ZipTree(false)
            add-to-tree(new-tree, path, i + 1, stat)
            entries(tree)[name(e)] = new-tree
        (e) :
          throw(ZipTreeError())
    else :
      throw(ZipTreeError()) when item(tree) is-not False
      set-item(tree, stat)

  ;Construct tree  
  val root = ZipTree(false)
  do(add-to-tree{root, _}, stats)
  root

;Remove all extraneous entries from the given tree
public defn remove-extraneous-entries! (tree:ZipTree) -> False :
  ;Test whether the given tree is extraneous
  defn wellformed? (tree:ZipTree) -> True|False :
    match(item(tree)) :
      (item:ZipStat) :
        match(index?(item)) :
          (i:Int) : empty?(entries(tree)) or directory?(item)
          (i) : false
      (f:False) :
        not empty?(entries(tree))

  ;Strip all extraneous entries from the given tree
  defn strip-extraneous-entries (tree:ZipTree) :
    val keys = to-tuple(keys(entries(tree)))
    for key in keys do :
      val t = entries(tree)[key]
      if not wellformed?(t) : remove(entries(tree), key)
      else : strip-extraneous-entries(t)

  ;Launch!
  strip-extraneous-entries(tree)
  false   

defmethod print (o:OutputStream, t:ZipTree) :
  defn print-entry (o:OutputStream, e:KeyValue<String,ZipTree>) :
    val tree = value(e)
    val stat-str = "" when item(tree) is False
              else " (%_)" % [item(tree)]
    print(o, "%~%_" % [key(e), stat-str])
    if not empty?(entries(tree)) :
      print(o, " :")
      print-entries(o, entries(tree))
  defn print-entries (o:OutputStream, es:Seqable<KeyValue<String,ZipTree>>) :
    val o2 = IndentedStream(o)
    for e in es do :
      print(o2, "\n")
      print-entry(o2, e)
  if empty?(entries(t)) :
    print(o, "ZipTree()")
  else :
    print(o, "ZipTree(")
    print-entries(o, entries(t))
    print(o, ")")

;============================================================
;=================== Extraction Algorithm ===================
;============================================================

;Extracts the given archive to the given path.
;Throws an exception if archive cannot be extracted correctly.
public defn extract (archive:ZipArchive, path:String) -> False :
  ;Get the archive in tree form.
  defn archive-tree () -> ZipTree :
    val stats = seq(stats{archive, _}, 0 to num-entries(archive))
    val tree = ZipTree(stats)
    remove-extraneous-entries!(tree)
    tree

  ;Create directories leading up to the given path.
  defn make-dirs (path:ParsedPath) -> True|False :
    for l in 1 through length(entries(path)) do :
      val subpath = to-string(ParsedPath(entries(path)[0 to l]))
      if file-exists?(subpath) :
        if file-type(subpath) is-not DirectoryType :
          val msg = to-string("Path %~ is not a directory." % [subpath])
          throw(ZipExtractError(msg))
      else :
        create-dir(subpath)

  ;Ensure that no entry in the tree overwrites any existing file/directory.
  defn ensure-no-conflict (tree:ZipTree, dest:ParsedPath) :
    for e in entries(tree) do :
      val path* = to-string(relative-to-dir(dest, parse-path(key(e))))
      if file-exists?(path*) :
        throw(ZipExtractError(to-string("Cannot extract to path %~. That file/directory already exists." % [path*])))

  ;Extract the tree to this destination.
  ;If it is a directory, then create the directory and then recursively extract its children.
  ;If it is a file, then unzip the file at this location.
  defn extract (tree:ZipTree, dest:ParsedPath) :
    val dir? = item(tree) is False or
               directory?(item(tree) as ZipStat)
    if dir? :
      create-dir(to-string(dest))
      extract-entries(tree, dest)
    else :
      val stat = item(tree) as ZipStat
      val file = ZipFile(archive, index?(stat) as Int)
      try :
        val out = RandomAccessFile(to-string(dest), true)
        try :
          write-bytes(file, out)
        finally : close(out)
      finally : close(file)

  ;Extract the entries of the tree to the given destination.
  ;It is assumed that the destination exists.
  defn extract-entries (tree:ZipTree, dest:ParsedPath) :
    for e in entries(tree) do :
      val dest* = relative-to-dir(dest, parse-path(key(e)))
      extract(value(e), dest*)

  ;Main algorithm
  val tree = archive-tree()
  val root-path = parse-path(path)
  if file-exists?(path) : ensure-no-conflict(tree, root-path)
  else : make-dirs(root-path)
  extract-entries(tree, root-path)

;============================================================
;======================= Utilities ==========================
;============================================================

;[TODO] Temporary helper: Should be promoted to Stanza core.
lostanza defn make-string-from-array (len:ref<Int>, buf:ref<ByteArray>) -> ref<String> :
  return String(len.value, buf)
