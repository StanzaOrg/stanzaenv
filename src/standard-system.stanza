defpackage stanzaenv/standard-system :
  import core
  import collections
  import reader
  import core/parsed-path
  import stanzaenv/request-exit
  import stanzaenv/system-api
  import stanzaenv/sysutils
  import stanzaenv/debugenv
  import stanzaenv/mock-prompter

;============================================================
;==================== Debugging Intercepts ==================
;============================================================

add-var("INTERCEPT_STANZA_URL")
add-var("INTERCEPT_STANZAENV_URL")
add-var("INTERCEPT_PROMPTS", One(false))

;============================================================
;==================== Implementation ========================
;============================================================

public deftype StandardSystem <: System

public defn StandardSystem () -> StandardSystem :

  ;Create a mock prompter if necessary.
  val prompter = if debug-env-enabled?() :
    match(get-var("INTERCEPT_PROMPTS")) :
      (file:String) : FileMockPrompter(file)
      (f:False) : false

  new StandardSystem :
    defmethod get-registry (this, key:String, value:String) :
      #if-defined(PLATFORM-WINDOWS) :
        stanzaenv/windows-registry/windows-get-registry(HKEY-CURRENT-USER, key, value)
      #else :
        fatal("Registry is not supported on this platform.")

    defmethod set-registry (this, key:String, value:String, data:String) :
      #if-defined(PLATFORM-WINDOWS) :
        stanzaenv/windows-registry/windows-set-registry(HKEY-CURRENT-USER, key, value, data)
      #else :
        fatal("Registry is not supported on this platform.")

    defmethod get-env (this, name:String) -> String|False :
      get-env(name)

    defmethod set-env (this, name:String, value:String) -> False :
      set-env(name, value)

    defmethod file-exists? (this, name:String) -> True|False :
      file-exists?(name)

    defmethod create-dir (this, name:String) -> False :
      create-dir-recursive(name)

    defmethod list-dir (this, name:String) -> Tuple<String> :
      dir-files(name)

    defmethod directory? (this, path:String) -> True|False :
      file-type(path) is DirectoryType

    defmethod current-platform (this) -> Platform :
      CURRENT-PLATFORM

    defmethod download-to-file (this, url:String, filename:String) -> False :
      if debug-env-enabled?() :
        val stanza-url = "http://lbstanza.org/resources/stanza/"
        switch prefix?{url, _} :
          stanza-url :
            ;Retrieve the filename.
            val file = url[length(stanza-url) to false]

            ;Get the forwarding path based on what file was requested.
            val forwarding-dir = switch substring?{file, _} :
              "stanzaenv" : get-var("INTERCEPT_STANZAENV_URL")
              "stanza" : get-var("INTERCEPT_STANZA_URL")
              else : fatal("Cannot intercept URL %~." % [url])

            ;Get the full path to forward to.
            val fullpath = string-join([forwarding-dir "/" file])

            ;Ensure the file exists.
            if not file-exists?(fullpath) :
              throw(Exception("Forwarded path %~ does not exist." % [fullpath]))

            ;Perform the file copy.
            copy-file(fullpath, filename)
          else :
            fatal("Cannot intercept URL %~." % [url])
      else :
        stanzaenv/download/download-from-url(url, filename)

    defmethod unzip-to-folder (this, zipfile:String, folder:String) -> False :
      stanzaenv/unzip/unzip-to-dir(zipfile, folder)

    defmethod delete-recursive (this, folder:String) -> False :
      delete-recursive(folder, false)

    defmethod prompt-user (this, prompt:String) -> String :
      match(prompter:MockPrompter) :
        try :
          /prompt(prompter, prompt)
        catch (e) :
          println(e)
          request-exit(-1)
      else :
        #if-defined(PLATFORM-WINDOWS) :
          val prompter = core/line-prompter/LinePrompter(prompt, prompt)
        #else :
          val prompter = stz/line-noise-prompter/LineNoisePrompter(prompt, prompt)
        match(get-line(prompter)) :
          (str:String) : str
          (f:False) : request-exit(0)

    defmethod move-dir (this, old-path:String, new-path:String) -> False :
      val parsed = parse-path(new-path)
      create-dir-recursive(to-string(enclosing-dir(parsed)))
      rename-file(old-path, new-path)

    defmethod copy-file (this, old-path:String, new-path:String) -> False :
      copy-file(old-path, new-path)

    defmethod set-executable (this, path:String) -> False :
      chmod(path, 0o777)

    defmethod spit (this, filename:String, snippet, append?:True|False) -> False :
      spit(filename, snippet, append?)

    defmethod resolve-path (this, path:String) -> String|False :
      resolve-path(path)

    defmethod read-file (this, path:String) -> ? :
      read-file(path)

    defmethod call-system (this,
                           file:String,
                           args:Tuple<String>,
                           workdir:String|False,
                           env-vars:Tuple<KeyValue<String,String>>|False) ->
                           [Int, String] :
      val buffer = StringBuffer()
      val proc = Process(file, args, STANDARD-IN, PROCESS-OUT, PROCESS-OUT, workdir, env-vars)
      val proc-out = output-stream(proc)
      let loop () :
        val c = get-char(proc-out)
        match(c:Char) :
          add(buffer,c)
          loop()
      val code = match(wait(proc)) :
        (s:ProcessDone) : value(s)
        (s:ProcessTerminated|ProcessStopped) : -1
      val output = to-string(buffer)
      [code, output]

    defmethod replace-current-process (this,
                                       file:String,
                                       args:Tuple<String>) -> False :
      replace-current-process(file, args)