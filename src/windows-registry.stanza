defpackage stanzaenv/windows-registry :
  import core
  import collections

;============================================================
;====================== Externs =============================
;============================================================

extern windows_get_registry: (long, ptr<byte>, ptr<byte>) -> ptr<byte>
extern windows_set_registry: (long, ptr<byte>, ptr<byte>, ptr<byte>, long) -> int

;============================================================
;======================== Wrappers ==========================
;============================================================

;Retrieve a specific registry key from Windows.
public lostanza defn windows-get-registry (key:ref<Long>, subkey:ref<String>, value:ref<String>) -> ref<String> :
  val result = call-c windows_get_registry(key.value, addr!(subkey.chars), addr!(value.chars))
  if result != null :
    val s = String(result)
    call-c clib/free(result)
    return s
  else :
    return throw(Exception(core/windows-error-msg()))

;Set a specific registry key in Windows.
public lostanza defn windows-set-registry (key:ref<Long>, subkey:ref<String>, value:ref<String>, data:ref<String>) -> ref<False> :
  val result = call-c windows_set_registry(key.value, addr!(subkey.chars), addr!(value.chars), addr!(data.chars), data.length)
  if result :
    throw(Exception(core/windows-error-msg()))
  return false

;============================================================
;====================== HKEY Definitions ====================
;============================================================

public val HKEY-CURRENT-USER = 0x80000001L

;============================================================
;======================= Errors =============================
;============================================================

public deftype WindowsRegistryError <: Exception

public defstruct GetRegistryError <: WindowsRegistryError :
  key:Long
  subkey:String
  value:String

public defstruct SetRegistryError <: WindowsRegistryError :
  key:Long
  subkey:String
  value:String

defn key-name (key:Long) -> String :
  if key == HKEY-CURRENT-USER : "HKEY_CURRENT_USER"
  else : "UNKNOWN_HKEY"

defmethod print (o:OutputStream, e:GetRegistryError) :
  print(o, "Error retrieving Windows registry key %_\\%_.%_." % [key-name(key(e)), subkey(e), value(e)])

defmethod print (o:OutputStream, e:SetRegistryError) :
  print(o, "Error setting Windows registry key %_\\%_.%_." % [key-name(key(e)), subkey(e), value(e)])