defpackage stanzaenv/versions :
  import core
  import collections
  import stanzaenv/system-state

;============================================================
;===================== Representation =======================
;============================================================

;Represents a Stanza version.
public deftype VersionSpecifier <: Hashable & Equalable

;Represents a named Stanza version: e.g. 0.14.33
public defstruct NamedVersion <: VersionSpecifier :
  value: [Int, Int, Int]
with:
  hashable => true
  equalable => true

;Represents a local Stanza version: e.g. "mydir/tempstanza"
public defstruct LocalVersion <: VersionSpecifier :
  path: String
with:
  hashable => true
  equalable => true

;Represents the system version of Stanza. 
public defstruct SystemVersion <: VersionSpecifier
with:
  hashable => true
  equalable => true

;============================================================
;==================== Printers ==============================
;============================================================

defmethod print (o:OutputStream, v:SystemVersion) :
  print(o, "system")

defmethod print (o:OutputStream, v:LocalVersion) :
  print(o, "local %~" % [path(v)])

defmethod print (o:OutputStream, v:NamedVersion) :
  val [a b c] = value(v)
  print(o, "%_.%_.%_" % [a, b, c])

defmethod write (o:OutputStream, v:NamedVersion) :
  print(o, "\"%_\"" % [v])

;============================================================
;======================== Resolution ========================
;============================================================

;For local versions, resolve them to an absolute path.
public defn resolve (sys:System, v:VersionSpecifier) -> VersionSpecifier :
  match(v:LocalVersion) :
    val fullpath = resolve-path!(sys, path(v))
    LocalVersion(fullpath)
  else :
    v

;============================================================
;======================= Parsing ============================
;============================================================

;Parses the named version given by the given string.
;Returns false if doesn't parse.
public defn parse-named-version (str:String) -> NamedVersion|False :
  attempt :
    val parts = to-tuple(split(trim(str), "."))
    fail() when length(parts) != 3
    val a = to-int(parts[0]) as? Int
    val b = to-int(parts[1]) as? Int
    val c = to-int(parts[2]) as? Int
    for x in [a, b, c] do :
      fail() when x < 0 or x > 1000
    NamedVersion([a b c])

;Parses the list of strings for a version specifier.
public defn parse-version (strs:Tuple<String>) -> VersionSpecifier|False :
  switch(length(strs)) :
    1 :
      if strs[0] == "system" : SystemVersion()
      else : parse-named-version(strs[0])
    2 :
      if strs[0] == "local" : LocalVersion(strs[1])
      else : false
    else :
      false