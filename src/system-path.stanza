defpackage stanzaenv/system-path :
  import core
  import collections
  import core/parsed-path
  import stanzaenv/system-api
  import stanzaenv/errors

;Retrieve the tuple of paths on the system PATH.
public defn system-paths (sys:System) -> Tuple<String> :
  match(get-env(sys, "PATH")) :
    (str:String) :
      val parts = split(str, path-delimiter(current-platform(sys)))
      to-tuple(filter({not empty?(_)}, parts))
    (f:False) :
      []

;Set the tuple of paths on the system PATH.
public defn set-system-paths (sys:System, paths:Tuple<String>) -> False :
  val path-string = string-join(paths, path-delimiter(current-platform(sys)))
  set-env(sys, "PATH", path-string)

;Helper: Return the delimiter used to separate paths on the PATH variable.
defn path-delimiter (platform:Platform) -> String :
  switch(platform) :
    Windows : ";"
    else : ":"

;Return the index of the given path on the path list.
;Returns false if not on the list.
public defn find-on-path-list (sys:System, paths:Tuple<String>, path:String) -> Int|False :
  defn match? (a:String, b:String) :
    match(resolve-path(sys,a), resolve-path(sys,b)) :
      (a:String, b:String) : a == b
      (a, b) : false  
  for sys-path in paths index-when :
    match?(sys-path, path)

;Returns true if the given path is on the path list.
public defn on-path? (sys:System, path:String) -> True|False :
  find-on-path-list(sys, system-paths(sys), path) is Int

;Try adding the given path to the system path.
public defn add-to-path (sys:System, path:String) -> False :
  defn fill-template (template:String) : "\n\n%_" % [template % [path]]    
  switch(detect-shell(sys)) :
    ZshShell :
      spit(sys, user-home(sys,".zprofile"), fill-template(ZSH-EXPORT), true)
    BashShell :
      spit(sys, user-home(sys,".bashrc"), fill-template(BASH-EXPORT), true)
    CmdExe :
      val old-path = get-registry(sys, "Environment", "Path")
      val new-path = string-join([path ";" old-path])
      set-registry(sys, "Environment", "Path", new-path)
    false :
      throw(CouldNotDetectShell())

;Try adding the given environment variable to the system.
public defn add-to-system-vars (sys:System, variable:String, value:String) -> False :
  defn fill-template (template:String) : "\n\n%_" % [template % [variable, value]]    
  switch(detect-shell(sys)) :
    ZshShell :
      spit(sys, user-home(sys,".zprofile"), fill-template(ZSH-SET-VAR), true)
    BashShell :
      spit(sys, user-home(sys,".bashrc"), fill-template(BASH-SET-VAR), true)
    CmdExe :
      set-registry(sys, "Environment", variable, value)
    false :
      throw(CouldNotDetectShell())


;Return the path to the user's home directory.
defn user-home (sys:System, file:String) -> String :
  match(get-env(sys, "HOME")) :
    (home:String) : string-join([home "/" file])
    (f:False) : throw(CouldNotDetectHome())

;Snippet to append to the end of .zprofile.
val ZSH-EXPORT = trim $ \<STR>
# This is automatically added by the 'stanzaenv' installer.
export PATH="%_:$PATH"
<STR>

;Snippet to set variable
val ZSH-SET-VAR = trim $ \<STR>
# This is automatically added by the 'stanzaenv' installer.
export %_="%_"
<STR>

;Snippet to append to the end of .bashrc.
val BASH-EXPORT = trim $ \<STR>
# This is automatically added by the 'stanzaenv' installer.
export PATH="%_:$PATH"
<STR>

;Snippet to set variable
val BASH-SET-VAR = trim $ \<STR>
# This is automatically added by the 'stanzaenv' installer.
export %_="%_"
<STR>

;Detect the shell that the current terminal is using.
;Returns false if we failed to detect the shell.
public defn detect-shell (sys:System) -> Shell|False :
  match(get-env(sys, "SHELL")) :
    (str:String) :
      switch substring?{str, _} :
        "zsh" : ZshShell
        "bash" : BashShell
        else : CmdExe when current-platform(sys) == Windows          
    (f:False) :
      CmdExe when current-platform(sys) == Windows

;Represents the different recognized shells.
public defenum Shell :
  ZshShell
  BashShell
  CmdExe

