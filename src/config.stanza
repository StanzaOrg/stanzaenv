defpackage stanzaenv/config :
  import core
  import collections
  import core/parsed-path
  import stanzaenv/versions
  import stanzaenv/errors
  import stz/printing-utils

;============================================================
;====================== Representation ======================
;============================================================

;Represents the config file.
public defstruct ConfigFile :
  location:ParsedPath with: (ensure => absolute!)
  stmts:Tuple<ConfigStmt> with: (updater => sub-stmts)

;Ensure: Absolute path
defn absolute! (description:String, path:ParsedPath) :
  if not absolute?(path) :
    fatal("Path '%_' given to %_ is not absolute." % [path, description])

;Represents a line in the config file.
public deftype ConfigStmt

;Sets the version in the config file.
public defstruct VersionStmt <: ConfigStmt :
  version:VersionSpecifier

;Records the name of an extension to use.
public defstruct ExtensionStmt <: ConfigStmt :
  name:String
  path:ParsedPath

;Records the addtional pkg directories to search in.
public defstruct PkgDirsStmt <: ConfigStmt :
  paths:Tuple<ParsedPath>

;Records the additional proj files to include.
public defstruct ProjFilesStmt <: ConfigStmt :
  paths:Tuple<ParsedPath>

;============================================================
;====================== Validator ===========================
;============================================================

;Validate that the configuration file is proper.
public defn validate (stmts:Tuple<ConfigStmt>, location:String) -> False :
  ;Track number of times each statement appears.
  val count-table = HashTable<Symbol,Int>(0)  
  defn increment-count (name:Symbol) -> False :
    update(count-table, {_ + 1}, name)
    false

  ;Count each type of statement.
  for stmt in stmts do :
    match(stmt) :
      (stmt:VersionStmt) : increment-count(`version-stmt)
      (stmt:ExtensionStmt) : increment-count(`extension-stmt)
      (stmt:PkgDirsStmt) : increment-count(`pkg-dirs-stmt)
      (stmt:ProjFilesStmt) : increment-count(`proj-files-stmt)

  ;Validate.
  if count-table[`version-stmt] == 0 :
    throw(ConfigFileError(location, "Missing version statement in config file."))
  else if count-table[`version-stmt] > 1 :
    throw(ConfigFileError(location, "Multiple version statements in config file."))
  if count-table[`pkg-dirs-stmt] > 1 :
    throw(ConfigFileError(location, "Multiple pkg-dirs statements in config file."))
  if count-table[`proj-files-stmt] > 1 :
    throw(ConfigFileError(location, "Multiple proj-files statements in config file."))

;============================================================
;======================= Accessors ==========================
;============================================================

;Create a fresh config file containing just a version specifier.
public defn ConfigFile (path:String, v:VersionSpecifier) -> ConfigFile :
  val parsed = parse-path(path)
  ConfigFile(parsed, [VersionStmt(v)])

;Return the version specified in the config file.
public defn version (f:ConfigFile) -> VersionSpecifier :
  val stmt = find-by!<VersionStmt>(stmts(f))
  version(stmt)

;Return the path to the extension, if there is one.
public defn extension-path (f:ConfigFile, name:String) -> String|False :
  val stmt = for stmt in stmts(f) find :
    match(stmt:ExtensionStmt) :
      /name(stmt) == name
  match(stmt:ExtensionStmt) :
    to-string(relative-to-dir(location(f), path(stmt)))

;Retrieve all the extension names in the config file.
public defn all-extension-names (f:ConfigFile) -> Tuple<String> :
  to-tuple(seq(name, filter-by<ExtensionStmt>(stmts(f))))    

;Return a new configuration file with a different version specifier.
public defn sub-version (f:ConfigFile, v:VersionSpecifier) -> ConfigFile :
  val new-stmts = for stmt in stmts(f) map :
    match(stmt:VersionStmt) : VersionStmt(v)
    else : stmt
  sub-stmts(f, new-stmts)

;============================================================
;======================= Signature ==========================
;============================================================

;Retrieve the signature of a config file.
public defn signature (c:ConfigFile) -> String :
  string-signature(string-join([location(c) "," c]))

;Compute the hash signature of a given string.
defn string-signature (s:String) -> String :
  val bytes = to-byte-array(s)
  val hash = core/sha256/sha256-hash(bytes)
  string-join(seq(to-hex-chars, hash))

;Store the string in a ByteArray.
defn to-byte-array (s:String) -> ByteArray :
  val a = ByteArray(length(s))
  for (c in s, i in 0 to false) do :
    a[i] = to-byte(c)
  a

;Characters used in a hex representation.
val HEX-CHARS = "0123456789ABCDEF"

;Convert a byte to the hex representation.
defn to-hex-chars (a:Byte) -> String :
  val c1 = HEX-CHARS[to-int(a) & 0xF]
  val c2 = HEX-CHARS[to-int(a) >> 4]
  String([c1, c2])

;============================================================
;===================== Printers =============================
;============================================================

defmethod print (o:OutputStream, f:ConfigFile) :
  print(o, "%n" % [stmts(f)])

defmethod print (o:OutputStream, s:VersionStmt) :
  print(o, "stanza-version: %~" % [version(s)])

defmethod print (o:OutputStream, s:ExtensionStmt) :
  print(o, "extension: %~" % [to-string(path(s))])

defmethod print (o:OutputStream, s:PkgDirsStmt) :
  val items = seq(written{to-string(_)}, paths(s))
  print(o, "pkg-dirs%_" % [colon-field-list(items)])

defmethod print (o:OutputStream, s:ProjFilesStmt) :
  val items = seq(written{to-string(_)}, paths(s))
  print(o, "proj-files%_" % [colon-field-list(items)])