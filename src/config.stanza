defpackage stanzaenv/config :
  import core
  import collections
  import stanzaenv/versions
  import stanzaenv/errors

;============================================================
;====================== Representation ======================
;============================================================

;Represents the config file.
public defstruct ConfigFile :
  stmts:Tuple<ConfigStmt>

;Represents a line in the config file.
public deftype ConfigStmt

;Sets the version in the config file.
public defstruct VersionStmt <: ConfigStmt :
  version:VersionSpecifier

;============================================================
;====================== Validator ===========================
;============================================================

public defn validate (f:ConfigFile) -> False :
  ;Track number of times each statement appears.
  val count-table = HashTable<Symbol,Int>(0)  
  defn increment-count (name:Symbol) -> False :
    update(count-table, {_ + 1}, name)
    false

  ;Count each type of statement.
  for stmt in stmts(f) do :
    match(stmt) :
      (stmt:VersionStmt) : increment-count(`version-stmt)

  ;Validate.
  if count-table[`version-stmt] == 0 :
    throw(ConfigFileError("Missing version statement in config file."))
  else if count-table[`version-stmt] > 1 :
    throw(ConfigFileError("Multiple version statements in config file."))

;============================================================
;======================= Accessors ==========================
;============================================================

;Return the version specified in the config file.
public defn version (f:ConfigFile) -> VersionSpecifier :
  val stmt = find-by!<VersionStmt>(stmts(f))
  version(stmt)