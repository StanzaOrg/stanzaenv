defpackage stanzaenv/harness :
  import core
  import collections
  import core/parsed-path
  import stanzaenv/download
  import stanzaenv/unzip
  import stanzaenv/urls
  import stanzaenv/system-state
  import stanzaenv/read-state
  import stanzaenv/install
  import stanzaenv/system-api
  import stanzaenv/versions
  import stanzaenv/set-version
  import stanzaenv/config-syntax
  import stanzaenv/filetree
  import stanzaenv/call-stanza
  import stanzaenv/mock-prompter
  import stz/printing-utils

;============================================================
;================ Testing System States =====================
;============================================================

defn testing-state (ints:Seqable<Int>) -> SystemState :

  val int-counter = to-seq(ints)

  defn int-switch (ctxt:String, max:Int) :
    if empty?(int-counter) :
      fatal("Expecting to receive integer switch (%_ or lower) for context %~." % [max, ctxt])
    val i = next(int-counter)
    if i > max :
      fatal("Context %~ expecting integer switch %_ or lower, but received %_." % [ctxt, max])
    ;Debugging println
    ;println("Use switch %_ for context %~." % [i, ctxt])
    i

  defn project-version () -> ProjectVersion|False :
    switch(int-switch("project-version", 2)) :
      0 : ProjectVersion(".stanza_version", version-spec())
      1 : ProjectVersion("../../.stanza_version", version-spec())
      2 : false    
      
  defn version-spec () -> VersionSpecifier :
    switch(int-switch("version-spec", 4)) :
      0 : NamedVersion([0 17 49])
      1 : NamedVersion([0 17 50])
      2 : NamedVersion([1 0 0])
      3 : LocalVersion("path/to/mybuild")
      4 : LocalVersion("../../mystanza")

  defn installation () -> EnvInstallation :
    switch(int-switch("installation", 3)) :
      0 : DefaultInstallation("/users/patricksli/.stanzaenv")
      1 : DefaultInstallation("/users/naz/.stanzaenv")
      2 : ConfigInstallation("/Applications/mystanzaenv")
      3 : NoInstallation()

  defn path-status () -> PathStatus :
    val [path, index] = switch(int-switch("path",3)) :
      0 : [[], false]
      1 : [["/users/patricksli/bin"
            "/users/patricksli/opt/local"
            "/opt/bin"]
           false]
      2 : [["/users/patricksli/bin"
            "/users/patricksli/opt/local"
            "/opt/bin"]
           1]
      3 : [["/users/naz/bin"]
           0]
    PathStatus(path, index)

  defn installed-versions () -> Tuple<InstalledStanza> :
    val n = int-switch("installed-versions", 3)
    to-tuple $ for i in 0 to n seq :
      InstalledStanza(version-spec() as NamedVersion)

  SystemState(
    installation()
    project-version()
    version-spec()
    path-status()
    installed-versions())

;============================================================
;================= Printing out System States ===============
;============================================================

defn print-states () :
  println $ testing-state $ [
    0 ;installation
    0 ;project-version
    0 ;version-spec
    0 ;version-spec
    0 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    1 ;project-version
    0 ;version-spec
    0 ;version-spec
    0 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    0 ;version-spec
    0 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    2 ;version-spec
    0 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    3 ;version-spec
    0 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    4 ;version-spec
    0 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    4 ;version-spec
    1 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    4 ;version-spec
    2 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    4 ;version-spec
    3 ;path
    1 ;installed-versions
    2 ;version-spec
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    4 ;version-spec
    3 ;path
    0 ;installed-versions
  ]

  println $ testing-state $ [
    0 ;installation
    2 ;project-version
    4 ;version-spec
    3 ;path
    3 ;installed-versions
    1 ;version 0
    1 ;version 1
    2 ;version 2
  ]

;============================================================
;==================== Mock System ===========================
;============================================================

defstruct MockFile :
  contents:String

defn MockSystem (env-vars:Tuple<KeyValue<String,String>>
                 existing-files:Tuple<KeyValue<String,String>|String>,
                 working-dir:String,
                 prompts:Tuple<KeyValue<String,String>>,
                 platform:Platform) -> System :
                 
  ;Use the filetree to mimic a file system.               
  val filetree = FileTree(existing-files, working-dir)

  ;Use a sequence of prompts to mimic the user responses.
  val prompter = MockPrompter(prompts)
  
  new System :
    defmethod print (o:OutputStream, this) :
      print(o, filetree)
      
    defmethod get-env (this, name:String) :
      val result = lookup?(env-vars, name)
      println("MockSystem: get-env(%~) = %~" % [name, result])
      result

    defmethod set-env (this, name:String, value:String) :
      println("MockSystem: set-env(%~, %~)" % [name, value])
      
    defmethod create-dir (this, name:String) :
      println("MockSystem: create-dir(%~)" % [name])
      add(filetree, string-join([name, "/"]))
      
    defmethod file-exists? (this, name:String) :
      val result = exists?(filetree, name)
      println("MockSystem: file-exists?(%~) = %~" % [name, result])
      result
      
    defmethod directory? (this, name:String) :
      val result = directory?(filetree, name)
      println("MockSystem: directory?(%~) = %_" % [name, result])
      result
      
    defmethod current-platform (this) :
      val result = platform
      println("MockSystem: current-platform() = %~" % [result])
      result
      
    defmethod download-to-file (this, url:String, filename:String) :
      println("MockSystem: download-to-file(%~, %~)" % [url, filename])
      add(filetree, filename => filename)
      
    defmethod unzip-to-folder (this, zipfile:String, folder:String) :
      println("MockSystem: unzip-to-folder(%~, %~)" % [zipfile, folder])
      ;Imitate unzip.
      val zip = slurp(filetree, zipfile)
      val mock-stanzaenv-zip = FileTree(
        ["/bin/stanzaenv"
         "/License.txt"],
        "/")
      val mock-stanza-zip = FileTree(
        ["/stanza"
         "/License.txt"
         "/pkgs/core.pkg"
         "/core/core.stanza"],
        "/")
      switch substring?{zip, _} :
        "stanzaenv.zip" : add(filetree, folder, mock-stanzaenv-zip["/"])
        "stanza.zip" : add(filetree, folder, mock-stanza-zip["/"])
        else : fatal("Not yet implemented: %_" % [zip])
      
    defmethod delete-recursive (this, folder:String) :
      println("MockSystem: delete-recursive %~" % [folder])
      delete(filetree, folder)

    defmethod move-dir (this, oldpath:String, newpath:String) :
      println("MockSystem: move-dir(%~, %~)" % [oldpath, newpath])
      rename(filetree, oldpath, newpath)

    defmethod copy-file (this, oldpath:String, newpath:String) :
      println("MockSystem: copy-file(%~, %~)" % [oldpath, newpath])
      copy-file(filetree, oldpath, newpath)      

    defmethod set-executable (this, path:String) :
      println("MockSystem: set-executable(%~)" % [path])

    defmethod resolve-path (this, path:String) :
      val result = resolve(filetree, path)
      println("MockSystem: resolve-path(%~) = %~" % [path, result])      
      result
      
    defmethod spit (this, path:String, snippet, append?:True|False) :
      println("MockSystem: spit(%~, %~)" % [path, append?])
      println("Contents:")
      within indented() :
        println(snippet)
      spit(filetree, path, to-string(snippet), append?)
      
    defmethod read-file (this, path:String) :
      println("MockSystem: read-file(%~)" % [path])
      reader/read-all(slurp(filetree, path))
        
    defmethod list-dir (this, path:String) :
      list-dir(filetree, path)

    defmethod call-system (this, 
                           file:String,
                           args:Tuple<String>,
                           workdir:String|False,
                           env-vars:Tuple<KeyValue<String,String>>|False) -> [Int, String] :
      val items = [
        simple-field("file", written(file))
        simple-field("args", args)
        falseable-field("workdir", workdir)
        simple-field("env-vars", env-vars)]
      println("MockSystem: call-system%_" % [colon-field-list(items)])
      [0, ""]

    defmethod replace-current-process (this, 
                                       file:String,
                                       args:Tuple<String>) -> False :
      val items = [
        simple-field("file", written(file))
        simple-field("args", args)]
      println("MockSystem: replace-current-process%_" % [colon-field-list(items)])
      
    defmethod prompt-user (this, question:String) :
      prompt(prompter, question)

;============================================================
;==================== Try Out Install =======================
;============================================================

;Does not install Stanza at the end.
defn try-install-0 () :
  val sys = MockSystem(
    ;env vars
    ["SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"]
    
    ;existing files
    ["/Applications/"]
    
    ;working directory
    "/"
    
    ;prompts
    ["installed in" => "/Applications/stanzaenv"
     "system PATH" => "yes"
     "STANZAENV_DIR" => "yes"
     "initial version of Stanza" => ""]

    ;platform
    OS-X)
    
  install-stanzaenv(sys)

;Tries to install Stanza at the end.
defn try-install-1 () :
  val sys = MockSystem(
    ;env vars
    ["SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"]
    
    ;existing files
    ["/Applications/"]
    
    ;working directory
    "/"
    
    ;prompts
    ["installed in" => "/Applications/stanzaenv"
     "system PATH" => "yes"
     "STANZAENV_DIR" => "yes"
     "initial version of Stanza" => "0.17.52"]

    ;platform
    OS-X)
    
  install-stanzaenv(sys)

;============================================================
;================== Try parsing config file =================
;============================================================

defn print-errors (body:() -> ?) :
  try: body()
  catch (e) : println(e)

defn try-parse-config-1 () :
  val str = \<STR>
  version: "0.1"
  <STR>
  within print-errors() :
    parse-config-file(reader/read-all(str))

defn try-parse-config-2 () :
  val str = \<STR>
  stanza-version: "0.1.17"
  <STR>
  within print-errors() :
    parse-config-file(reader/read-all(str))

defn try-parse-config-3 () :
  val str = \<STR>
  stanza-version: local "mypath"
  <STR>
  within print-errors() :
    parse-config-file(reader/read-all(str))

defn try-parse-config-4 () :
  val str = \<STR>
  stanza-version: system
  <STR>
  within print-errors() :
    parse-config-file(reader/read-all(str))

;============================================================
;===================== Try Out Read State ===================
;============================================================

defn try-read-state-1 () :
  val sys = MockSystem(
    ;env vars
    ["SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"]
    
    ;existing files
    ["/Applications/"]
    
    ;working directory
    "/"
    
    ;prompts
    []

    ;platform
    OS-X)
  within print-errors() :
    println(system-state(sys))

defn try-read-state-2 () :
  val sys = MockSystem(
    ;env vars
    ["PWD" => "/users/myworkdir"
     "SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"]
    
    ;existing files
    ["/Applications/"]
    
    ;working directory
    "/"
    
    ;prompts
    []

    ;platform
    OS-X)
  within print-errors() :
    println(system-state(sys))

defn try-read-state-3 () :
  val global-config = \<STR>
    stanza-version: "0.17.52"
  <STR>
  val sys = MockSystem(
    ;env vars
    ["PATH" => "/users/emacs:/Applications/go:/users/patricksli/.stanzaenv/bin"
     "SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"]
    
    ;existing files
    ["/Applications/"
     "/users/patricksli/.stanzaenv/bin/stanzaenv"
     "/users/patricksli/.stanzaenv/stanzaenv.config" => global-config]

    ;working dir
    "/users/myworkdir"
    
    ;prompts
    []

    ;platform
    OS-X)
  within print-errors() :
    println(system-state(sys))

defn try-read-state-4 () :
  val global-config = \<STR>
    stanza-version: "0.17.50"
  <STR>
  val sys = MockSystem(
    ;env vars
    ["PATH" => "/users/emacs:/Applications/go:/users/patricksli/.stanzaenv/bin:/Applications/stanzaenv/bin"
     "SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"
     "STANZAENV_DIR" => "/Applications/stanzaenv"]
    
    ;existing files
    ["/Applications/stanzaenv/bin/stanzaenv"
     "/Applications/stanzaenv/stanzaenv.config" => global-config
     "/Applications/stanzaenv/stanza/v0.5.4/"
     "/Applications/stanzaenv/stanza/v0.5.3/"
     "/Applications/stanzaenv/stanza/v0.5.2/"
     "/users/patricksli/.stanzaenv/bin/stanzaenv"
     "/users/patricksli/.stanzaenv/stanzaenv.config" => global-config]

    ;working dir
    "/users/myworkdir"
    
    ;prompts
    []

    ;platform
    OS-X)
  within print-errors() :
    println(system-state(sys))

;============================================================
;=================== Set Version ============================
;============================================================

defn try-set-state-1 () :
  val global-config = \<STR>
    stanza-version: "0.17.50"
  <STR>
  val sys = MockSystem(
    ;env vars
    ["PATH" => "/users/emacs:/Applications/go:/users/patricksli/.stanzaenv/bin:/Applications/stanzaenv/bin"
     "SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"
     "STANZAENV_DIR" => "/Applications/stanzaenv"]
    
    ;existing files
    ["/Applications/stanzaenv/bin/stanzaenv"
     "/Applications/stanzaenv/stanzaenv.config" => global-config
     "/Applications/stanzaenv/stanza/v0.5.4/"
     "/Applications/stanzaenv/stanza/v0.5.3/"
     "/Applications/stanzaenv/stanza/v0.5.2/"
     "/users/patricksli/.stanzaenv/bin/stanzaenv"
     "/users/patricksli/.stanzaenv/stanzaenv.config" => global-config]

    ;working dir
    "/users/myworkdir"
    
    ;prompts
    []

    ;platform
    OS-X)
  within print-errors() :
    println(set-global-stanza-version(sys, NamedVersion([0 17 50]), system-state(sys)))  

;============================================================
;====================== Try File Tree =======================
;============================================================

defn try-filetree-1 () :
  val tree = FileTree(
    ["/Applications/"
     "/Applications/settings/rules.txt"
     "/Applications/settings/config.dash"]
    "/Applications")
  println(tree)

defn try-filetree-2 () :
  val tree = FileTree(
    ["/Applications/"
     "/Applications/settings/rules.txt"
     "/Applications/settings/config.dash"]
    "/Applications")
  println(tree)
  delete(tree, "/Applications/settings/config.dash")
  add(tree, "/Applications/config/config.dash" => "post configuration")
  rename(tree, "/Applications/config/config.dash", "/Applications/config/config.dash2")
  rename(tree, "/Applications/settings", "/Applications/settings2")
  rename(tree, "/Applications/config/config.dash2", "/config.dash2")
  println(tree)
  println(slurp(tree, "/config.dash2"))

defn try-filetree-3 () :
  val tree = FileTree(
    ["/Applications/"
     "/Applications/settings/rules.txt"
     "/Applications/settings/config.dash"]
    "/Applications")
  println(tree)
  delete(tree, "/Applications/settings/config.dash")
  add(tree, "/Applications/config/config.dash" => "post configuration")
  rename(tree, "/Applications/config/config.dash", "/Applications/config/config.dash2")
  rename(tree, "/Applications/settings", "/Applications/settings2")
  rename(tree, "/Applications/config/config.dash2", "/config.dash2")
  spit(tree, "myprog.txt", "message1", false)
  spit(tree, "myprog2.txt", "message2", false)
  spit(tree, "mylog.txt", "event 1\n", true)
  spit(tree, "mylog.txt", "event 2\n", true)
  spit(tree, "mylog.txt", "event 3\n", true)
  change-dir(tree, "config")
  println(tree)
  println(slurp(tree, "/config.dash2"))

defn try-filetree-4 () :
  val tree1 = FileTree(
    ["/a/"
     "/a/b/"
     "/a/b/x.txt"
     "/a/b/y.txt"]
    "/")
  val tree2 = FileTree(
    ["/xyz/stuff.txt"
     "/zyx/leaf.txt"]
    "/")
  println(tree1)
  println(tree2)
  
  add(tree1, "/a", tree2["/"])
  println(tree1)

;============================================================
;=================== Try Call Stanza ========================
;============================================================

defn try-call-stanza () :
  val global-config = \<STR>
    stanza-version: "0.5.4"
  <STR>
  val sys = MockSystem(
    ;env vars
    ["PATH" => "/users/emacs:/Applications/go:/users/patricksli/.stanzaenv/bin:/Applications/stanzaenv/bin"
     "SHELL" => "bin/zsh"
     "HOME" => "/users/patricksli"
     "STANZAENV_DIR" => "/Applications/stanzaenv"]
    
    ;existing files
    ["/Applications/stanzaenv/bin/stanzaenv"
     "/Applications/stanzaenv/stanzaenv.config" => global-config
     "/Applications/stanzaenv/stanza/v0.5.4/stanza"
     "/Applications/stanzaenv/stanza/v0.5.3/stanza"
     "/Applications/stanzaenv/stanza/v0.5.2/stanza"
     "/users/patricksli/.stanzaenv/bin/stanzaenv"
     "/users/patricksli/.stanzaenv/stanzaenv.config" => global-config]

    ;working dir
    "/users/myworkdir"
    
    ;prompts
    []

    ;platform
    OS-X)
  within print-errors() :
    println(call-stanza(sys, ["stanza" "version" "-terse"], system-state(sys)))

;============================================================
;==================== Main Launcher =========================
;============================================================


  

within (package,sig) = set-stack-trace-filter() :
  package != `core
try-install-1()
;try-parse-config-4()
;try-read-state-1()
;try-read-state-2()
;try-read-state-3()
;try-read-state-4()
;try-set-state-1()
;try-filetree-4()
;try-call-stanza()