defpackage stanzaenv/main :
  import core
  import collections
  import arg-parser
  import stanzaenv/system-api
  import stanzaenv/standard-system
  import stanzaenv/system-state
  import stanzaenv/read-state
  import stanzaenv/request-exit
  import stanzaenv/versions

;============================================================
;====================== Framework ===========================
;============================================================

;Accumulate all the actions supported by stanzaenv.
val ENV-ACTIONS = Vector<Command>()
defn new-command (c:Command) : add(ENV-ACTIONS, c)

;============================================================
;===================== Initialize State =====================
;============================================================

;Initialize the system state.
defn initialize-system () -> [System, SystemState] :
  stanzaenv/debugenv/initialize-debugenv()
  val sys = StandardSystem()
  val state = system-state(sys)
  [sys, state]

;============================================================
;==================== Version Command =======================
;============================================================

val VERSION-MSG =
\<STR>
                    Stanzaenv
         Stanza Environment and Version Manager

                 Version %_.%_.%_
<STR>

new-command $ Command(
  "version"
  ZeroArg, false
  []
  "Displays the Stanzaenv version."
  false
  fn (cmd-args) :
    val [a b c] = stanzaenv/current-version/CURRENT-VERSION
    println(VERSION-MSG % [a, b, c])
)

;============================================================
;=================== Installation Command ===================
;============================================================

new-command $ Command(
  "install"
  ZeroArg, false,
  [],
  "Installs Stanzaenv."
  false
  fn (cmd-args) :
    stanzaenv/debugenv/initialize-debugenv()
    stanzaenv/install/install-stanzaenv(StandardSystem())
)

;============================================================
;======================= Status Command =====================
;============================================================

new-command $ Command(
  "status"
  ZeroArg, false,
  [],
  "Displays the status of the Stanza environment."
  false
  fn (cmd-args) :
    val [sys, state] = initialize-system()
    println("\n%_\n" % [status-report(state)])
)

;============================================================
;================= Install Stanza Command ===================
;============================================================

new-command $ Command(
  "install-version"
  OneArg, "the Stanza version to install. E.g. '0.17.4'."
  [],
  "Downloads and installs a particular version of Stanza."
  false,
  fn (cmd-args) :
    val version-str = arg(cmd-args,0)
    if parse-named-version(version-str) is False :
      throw(Exception("%_ is an invalid version number. \
                      Version is expected to look like '0.17.4'." % [version-str]))
                      
  fn (cmd-args) :
    val version = parse-named-version(arg(cmd-args,0)) as NamedVersion
    val [sys, state] = initialize-system()
    stanzaenv/install-version/install-stanza-version(
      sys,
      version,
      install-path(state))
)

;============================================================
;===================== Set Version ==========================
;============================================================

val SET-VERSION-HELP = trim $ \<STR>

This command sets the global Stanza version by writing to the global
Stanzaenv configuration file.

EXAMPLES:

Setting to a numbered Stanza version:

  stanzaenv set-version 0.17.50

Setting to a system Stanza version:

  stanzaenv set-version system

Setting to a Stanza version in a local directory:

  stanzaenv set-version local /my/local/stanzadir

<STR>

new-command $ Command(
  "set-version"
  AtLeastOneArg, "the Stanza version to set for the system."
  [],
  "Set the global Stanza version."
  SET-VERSION-HELP,
  fn (cmd-args) :
    val v = parse-version(args(cmd-args))
    if v is False :
      throw(Exception("Not a valid version specifier."))
    val [sys, state] = initialize-system()
    stanzaenv/set-version/set-global-stanza-version(
      sys,
      v as VersionSpecifier,
      system-state(sys)))

;============================================================
;===================== Set Project Version ==================
;============================================================

val SET-PROJECT-VERSION-HELP = trim $ \<STR>

This command sets the project-specific Stanza version by writing a new
'.stanza-version' configuration file to the current directory.

EXAMPLES:

Setting to a numbered Stanza version:

  stanzaenv set-project-version 0.17.50

Setting to a system Stanza version:

  stanzaenv set-project-version system

Setting to a Stanza version in a local directory:

  stanzaenv set-project-version local /my/local/stanzadir

<STR>

new-command $ Command(
  "set-project-version"
  AtLeastOneArg, "the Stanza version to set for the project."
  [],
  "Set the project Stanza version."
  SET-PROJECT-VERSION-HELP,
  fn (cmd-args) :
    val v = parse-version(args(cmd-args))
    if v is False :
      throw(Exception("Not a valid version specifier."))
    val [sys, state] = initialize-system()
    stanzaenv/set-version/set-project-stanza-version(
      sys,
      v as VersionSpecifier,
      system-state(sys)))

;============================================================
;===================== Remove Project Version ===============
;============================================================

new-command $ Command(
  "clear-project-version"
  ZeroArg, false,
  [],
  "Clears the project Stanza version."
  false,
  fn (cmd-args) :
    val [sys, state] = initialize-system()
    stanzaenv/set-version/clear-project-stanza-version(
      sys,
      system-state(sys))
)

;============================================================
;====================== Classify Mode =======================
;============================================================

deftype LaunchMode 

defstruct ShimMode <: LaunchMode :
  program:String

defstruct MainMode <: LaunchMode

;Retrieve the launch mode for the program.
defn launch-mode () -> LaunchMode :
  val args = command-line-arguments()
  if empty?(args) :
    MainMode()
  else :
    val arg0 = args[0]
    if suffix?(arg0, "stanza") :
      ShimMode("stanza")
    else :
      MainMode()

;============================================================
;======================== Launch ============================
;============================================================

defn main () :
  match(launch-mode()) :
    (mode:ShimMode) :
      try :
        val [sys, state] = initialize-system()
        stanzaenv/call-stanza/call-stanza(
          sys,
          to-tuple(command-line-arguments()),
          state)
      catch (e) :
        println(e)
        exit(-1)
    (mode:MainMode) : 
      within with-requested-exit() :
        simple-command-line-cli(
          VERSION-MSG,
          to-tuple(ENV-ACTIONS),
          "help",
          true)

main()