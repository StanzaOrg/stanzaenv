defpackage stanzaenv/shims :
  import core
  import collections
  import stanzaenv/system-api
  import stanzaenv/paths

;Delete all the shims in the bin directory except for the default shims.
public defn clear-shims (sys:System, root:String) -> False :
  val keep = default-bin-files(sys)
  val bin-dir = bin-dir(root)
  for file in list-dir(sys, bin-dir) do :
    if not contains?(keep, file) :
      delete-recursive(sys, relative-to(bin-dir, file))

;Create all the shims referred to by the system.
public defn create-shims (sys:System, state:SystemState) -> False :
  val root = install-path(state)
  for name in extension-names(state) do :
    val shim-exe = relative-to(bin-dir(root), name)
    if not file-exists?(sys, shim-exe) :
      create-shim(sys, root, name)

;Retrieve all the extension names in the system.
defn extension-names (state:SystemState) -> Collection<String> :
  val name-set = HashSet<String>()
  match(project-config(state)) :
    (c:ConfigFile) : add-all(name-set, all-extension-names(c))
    (f:False) : false
  match(global-config(state)) :
    (c:ConfigFile) : add-all(name-set, all-extension-names(c))
    (f:False) : false
  name-set

;Create a shim with the given name.
public defn create-shim (sys:System, root:String, shim-name:String) -> False :
  val stanzaenv-exe = stanzaenv-exe-path(root)
  val bin = bin-dir(root)
  val shim = relative-to(bin, shim-name)
  copy-file(sys, stanzaenv-exe, shim)
  set-executable(sys, shim)